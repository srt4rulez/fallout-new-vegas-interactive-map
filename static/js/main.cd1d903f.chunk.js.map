{"version":3,"sources":["Components/MojaveWastelandMap/mojave-wasteland-map.jpg","types.ts","Components/MojaveWastelandMarker/MojaveWastelandMarker.tsx","Components/MojaveWastelandMap/MojaveWastelandMap.tsx","Components/SettingsPanel/fallout-nv-logo.png","Components/MarkerListItem/MarkerListItem.tsx","Components/MarkerTypePanel/MarkerTypePanel.tsx","Components/SettingsPanel/SettingsPanel.tsx","Components/App/App.tsx","theme.ts","index.tsx"],"names":["typeMap","typesThatHaveSubTypes","typeLabelMap","typeColorMap","typeColorScheme","subTypeSkillBookSubMap","subTypeSkillBookLabelMap","MojaveWastelandMarker","isFound","url","title","desc","imgSrc","lat","lng","onMarkButtonClick","undefined","type","subType","onAdd","MarkerIcon","sx","color","replace","fontSize","className","classNames","icon","faMapMarkerAlt","L","html","ReactDomServer","renderToStaticMarkup","iconSize","iconAnchor","iconSizeX","popupAnchor","Marker","position","opacity","eventHandlers","add","Popup","fontFamily","as","size","marginBottom","href","isExternal","variant","marginLeft","colorScheme","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","src","alt","onClick","width","leftIcon","isChecked","bounds","MojaveWastelandMap","markers","isFoundMarkersShown","onMapCreation","onMarkerAdd","MapContainer","maxZoom","crs","Simple","whenCreated","ImageOverlay","mojaveWastelandMapImageSrc","map","marker","isHidden","id","MarkerListItem","tag","onMarkCheckboxChange","onMarkerTitleClick","Tag","onChange","label","placement","hasArrow","openDelay","fontWeight","wordBreak","whiteSpace","textAlign","MarkerTypePanel","onTypeClick","hasSubTypes","includes","subTypes","forEach","push","renderMarkerListItem","ListItem","Object","values","SettingsPanel","onClickShowFoundMarkers","appVersion","onShowAllClick","isLargeScreen","skillBookMarkers","filter","snowGlobeMarkers","FalloutNVLogoImageSrc","marginY","direction","align","justify","spacing","faEye","App","state","isSettingsDrawerOpen","isLargeScreenMqList","handleLargeScreenMqListChange","event","setState","matches","handleMarkButtonClick","prevState","index","findIndex","item","oldMarker","newMarkers","newMarker","updateLocalStorageMarker","localStorageMarkersJson","window","localStorage","getItem","localStorageMarkers","JSON","parse","setItem","stringify","handleShowFoundMarkersClick","newState","handleTypeClick","handleSettingsDrawerClose","handleShowAllClick","handleMapCreation","on","debug","console","log","latlng","handleMarkerTitleClick","markerData","openPopup","handleMarkerAdd","target","markerLatLng","getLatLng","find","handleOpenSettingsClick","renderSettingsPanel","version","this","matchMedia","addEventListener","markersFromJson","localStorageMarker","localStorageIsFoundMarkersShown","removeEventListener","AppSettingsPanel","isOpen","onClose","zIndex","paddingX","React","packageJson","theme","extendTheme","fonts","heading","body","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd1d903f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mojave-wasteland-map.a46f7234.jpg\";","const typeMap = {\n    SnowGlobe: 'snow_globe',\n    SkillBook: 'skill_book',\n} as const;\n\nexport type SnowGlobe = typeof typeMap.SnowGlobe;\nexport type SkillBook = typeof typeMap.SkillBook;\n\nexport type MarkerType = SnowGlobe | SkillBook;\n\nexport type TypesThatHaveSubTypes = SkillBook;\n\nconst typesThatHaveSubTypes: Array<string> = [\n    typeMap.SkillBook,\n];\n\nconst typeLabelMap = {\n    [typeMap.SnowGlobe]: 'Snow Globe',\n    [typeMap.SkillBook]: 'Skill Book',\n} as const;\n\n// Charka theme colors.\nconst typeColorMap = {\n    [typeMap.SnowGlobe]: 'green.500',\n    [typeMap.SkillBook]: 'yellow.300',\n} as const;\n\nconst typeColorScheme = {\n    [typeMap.SnowGlobe]: 'green',\n    [typeMap.SkillBook]: 'yellow',\n} as const;\n\nconst subTypeSkillBookSubMap = {\n    ChineseArmySpecialOpsTrainingManual: 'casotm',\n    WastelandSurvivalGuide:              'wsg',\n    BigBookOfScience:                    'bbos',\n    DCJournalOfInternalMedicine:         'dcjoim',\n    DeansElectronics:                    'de',\n    DuckAndCover:                        'dac',\n    GrognakTheBarbarian:                 'gtb',\n    GunsAndBullets:                      'gab',\n    LyingCongressionalStyle:             'lcs',\n    NikolaTeslaAndYou:                   'ntay',\n    PugilismIllustrated:                 'pi',\n    TalesOfAJunktownJerkyVendor:         'toajjv',\n    TumblersToday:                       'tt',\n} as const;\n\nexport type ChineseArmySpecialOpsTrainingManual = typeof subTypeSkillBookSubMap.ChineseArmySpecialOpsTrainingManual;\nexport type WastelandSurvivalGuide              = typeof subTypeSkillBookSubMap.WastelandSurvivalGuide;\nexport type BigBookOfScience                    = typeof subTypeSkillBookSubMap.BigBookOfScience;\nexport type DCJournalOfInternalMedicine         = typeof subTypeSkillBookSubMap.DCJournalOfInternalMedicine;\nexport type DeansElectronics                    = typeof subTypeSkillBookSubMap.DeansElectronics;\nexport type DuckAndCover                        = typeof subTypeSkillBookSubMap.DuckAndCover;\nexport type GrognakTheBarbarian                 = typeof subTypeSkillBookSubMap.GrognakTheBarbarian;\nexport type GunsAndBullets                      = typeof subTypeSkillBookSubMap.GunsAndBullets;\nexport type LyingCongressionalStyle             = typeof subTypeSkillBookSubMap.LyingCongressionalStyle;\nexport type NikolaTeslaAndYou                   = typeof subTypeSkillBookSubMap.NikolaTeslaAndYou;\nexport type PugilismIllustrated                 = typeof subTypeSkillBookSubMap.PugilismIllustrated;\nexport type TalesOfAJunktownJerkyVendor         = typeof subTypeSkillBookSubMap.TalesOfAJunktownJerkyVendor;\nexport type TumblersToday                       = typeof subTypeSkillBookSubMap.TumblersToday;\n\nexport type SkillBookSubTypes =\n    ChineseArmySpecialOpsTrainingManual\n    | WastelandSurvivalGuide\n    | BigBookOfScience\n    | DCJournalOfInternalMedicine\n    | DeansElectronics\n    | DuckAndCover\n    | GrognakTheBarbarian\n    | GunsAndBullets\n    | LyingCongressionalStyle\n    | NikolaTeslaAndYou\n    | PugilismIllustrated\n    | TalesOfAJunktownJerkyVendor\n    | TumblersToday\n;\n\nexport type MarkerSubtype = SkillBookSubTypes;\n\nconst subTypeSkillBookLabelMap = {\n    [subTypeSkillBookSubMap.BigBookOfScience]:                    'Big Book of Science (Science)',\n    [subTypeSkillBookSubMap.ChineseArmySpecialOpsTrainingManual]: 'Chinese Army: Special Ops Training Manual (Sneak)',\n    [subTypeSkillBookSubMap.DCJournalOfInternalMedicine]:         'D.C. Journal of Internal Medicine (Medicine)',\n    [subTypeSkillBookSubMap.DeansElectronics]:                    'Dean\\'s Electronics (Repair)',\n    [subTypeSkillBookSubMap.DuckAndCover]:                        'Duck and Cover! (Explosives)',\n    [subTypeSkillBookSubMap.GrognakTheBarbarian]:                 'Grognak the Barbarian (Melee Weapons)',\n    [subTypeSkillBookSubMap.GunsAndBullets]:                      'Guns and Bullets (Guns)',\n    [subTypeSkillBookSubMap.LyingCongressionalStyle]:             'Lying, Congressional Style (Speech)',\n    [subTypeSkillBookSubMap.NikolaTeslaAndYou]:                   'Nikola Tesla and You (Energy Weapons)',\n    [subTypeSkillBookSubMap.PugilismIllustrated]:                 'Pugilism Illustrated (Unarmed)',\n    [subTypeSkillBookSubMap.TalesOfAJunktownJerkyVendor]:         'Tales of a Junktown Jerky Vendor (Barter)',\n    [subTypeSkillBookSubMap.TumblersToday]:                       'Tumblers Today (Lockpick)',\n    [subTypeSkillBookSubMap.WastelandSurvivalGuide]:              'Wasteland Survival Guide (Survival)',\n} as const;\n\nexport interface MarkerInterface {\n    id?: string;\n    type?: MarkerType;\n    subType?: MarkerSubtype;\n    title?: string;\n    desc?: string;\n    url?: string;\n    imgSrc?: string;\n    lat?: number;\n    lng?: number;\n    isFound?: boolean;\n    isHidden?: boolean;\n}\n\nexport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    typeColorScheme,\n    typesThatHaveSubTypes,\n    subTypeSkillBookSubMap,\n    subTypeSkillBookLabelMap,\n};\n\n","import * as React from 'react';\nimport ReactDomServer from 'react-dom/server';\nimport classNames from 'classnames';\nimport './MojaveWastelandMarker.scss';\nimport {\n    Marker,\n    Popup,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport DOMPurify from 'dompurify';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    typeColorScheme,\n    subTypeSkillBookLabelMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n} from 'types';\nimport {\n    Button,\n    Checkbox,\n    Link,\n    Heading,\n    Text,\n    Badge,\n    Image,\n    Box,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport interface MojaveWastelandMarkerProps extends MarkerInterface {\n    // className?: string;\n    onMarkButtonClick?: React.DOMAttributes<Element>['onClick'];\n    onAdd?: L.LeafletEventHandlerFn;\n}\n\nconst MojaveWastelandMarker = ({\n    // className = '',\n    isFound = false,\n    url = '',\n    title = '',\n    desc = '',\n    imgSrc = '',\n    lat = 0,\n    lng = 0,\n    onMarkButtonClick = undefined,\n    type,\n    subType,\n    onAdd = undefined,\n}: MojaveWastelandMarkerProps): JSX.Element => {\n\n    const iconSizeX = 25.5;\n    const iconSizeY = 34; // update this value first, then check width for setting X.\n\n    const MarkerIcon = (\n        <Box\n            // color will be inherited from FontAwesomeIcon\n            sx={{\n                // use css variable directly\n                color: type ? `var(--chakra-colors-${typeColorMap[type].replace('.', '-')})` : '',\n            }}\n            fontSize={iconSizeY}\n            className={classNames([\n                'mojave-wasteland-marker__icon',\n            ])}\n        >\n\n            <FontAwesomeIcon\n                icon={faMapMarkerAlt}\n            />\n\n        </Box>\n    );\n\n    const icon = L.divIcon({\n        className: 'mojave-wasteland-marker__icon-wrapper',\n        html: ReactDomServer.renderToStaticMarkup(MarkerIcon),\n        iconSize: [\n            iconSizeX,\n            iconSizeY,\n        ],\n        iconAnchor: [\n            (iconSizeX / 2), // assuming the \"pin\" of the icon is in the middle of the icon.\n            iconSizeY,\n        ],\n        popupAnchor: [\n            0,\n            -(iconSizeY),\n        ],\n    });\n\n    return (\n\n        <Marker\n            // className={classNames([\n            //     'mojave-wasteland-marker',\n            //     className,\n            // ])}\n            position={[lat, lng]}\n            opacity={isFound ? 0.5 : 1}\n            icon={icon}\n            eventHandlers={{\n                add: onAdd,\n            }}\n        >\n\n            <Popup>\n\n                <Box\n                    // override leaflets font declaration\n                    fontFamily=\"body\"\n                >\n\n                    <Heading\n                        as=\"h3\"\n                        size=\"lg\"\n                        marginBottom=\"4\"\n                    >\n\n                        <Link\n                            href={url}\n                            isExternal={true}\n                        >\n\n                            {type === typeMap.SkillBook && subType && subTypeSkillBookLabelMap[subType] && `${subTypeSkillBookLabelMap[subType]} - `}\n\n                            {title}\n\n                        </Link>\n\n                    </Heading>\n\n                    <Badge\n                        variant=\"solid\"\n                        marginLeft=\"2\"\n                        colorScheme={type ? typeColorScheme[type] : undefined}\n                    >\n                        {type && typeLabelMap[type]}\n                    </Badge>\n\n                    {desc && (\n\n                        <Text\n                            className={classNames('mojave-wasteland-marker__desc')}\n                            dangerouslySetInnerHTML={{ // eslint-disable-line react/no-danger\n                                __html: DOMPurify.sanitize(desc),\n                            }}\n                        />\n\n                    )}\n\n                    {imgSrc && (\n\n                        <Image\n                            src={imgSrc}\n                            alt={title}\n                            marginBottom=\"4\"\n                        />\n\n                    )}\n\n                    <Button\n                        onClick={onMarkButtonClick}\n                        width=\"100%\"\n                        variant=\"outline\"\n                        leftIcon={(\n                            <Checkbox\n                                isChecked={isFound}\n                            />\n                        )}\n                        colorScheme=\"blue\"\n                    >\n\n                        Mark As Found\n\n                    </Button>\n\n                </Box>\n\n            </Popup>\n\n        </Marker>\n\n    );\n\n};\n\nexport default MojaveWastelandMarker;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MojaveWastelandMap.scss';\nimport {\n    MapContainer,\n    ImageOverlay,\n} from 'react-leaflet';\nimport type {\n    MapContainerProps,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport mojaveWastelandMapImageSrc from './mojave-wasteland-map.jpg';\nimport MojaveWastelandMarker from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\nimport type { MojaveWastelandMarkerProps } from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\nimport type {\n    MarkerInterface,\n} from 'types';\n\nconst bounds = new L.LatLngBounds({\n    lat: 0,\n    lng: 0,\n}, {\n    // for now, this is just the size of the map image.\n    lat: 1024,\n    lng: 1024\n});\n\nexport interface MojaveWastelandMapProps {\n    className?: string;\n    markers?: Array<MarkerInterface>;\n    onMarkButtonClick?: (marker: MarkerInterface) => MojaveWastelandMarkerProps['onMarkButtonClick'];\n    isFoundMarkersShown?: boolean;\n    onMapCreation?: MapContainerProps['whenCreated'];\n    onMarkerAdd?: MojaveWastelandMarkerProps['onAdd'];\n}\n\nconst MojaveWastelandMap = ({\n    className = '',\n    markers = [],\n    onMarkButtonClick = undefined,\n    isFoundMarkersShown = true,\n    onMapCreation = undefined,\n    onMarkerAdd = undefined,\n}: MojaveWastelandMapProps): JSX.Element => {\n\n    return (\n\n        <MapContainer\n            className={classNames([\n                'mojave-wasteland-map',\n                className,\n            ])}\n            maxZoom={4}\n            crs={L.CRS.Simple}\n            bounds={bounds}\n            whenCreated={onMapCreation} // eslint-disable-line react/jsx-handler-names\n        >\n\n            <ImageOverlay\n                url={mojaveWastelandMapImageSrc}\n                bounds={bounds}\n            />\n\n            {markers && markers.map((marker) => {\n\n                if (!marker.lat || !marker.lng) {\n                    return null;\n                }\n\n                // Don't render found items.\n                if (!isFoundMarkersShown && marker.isFound) {\n                    return null;\n                }\n\n                if (marker.isHidden) {\n                    return null;\n                }\n\n                return (\n\n                    <MojaveWastelandMarker\n                        key={marker.id}\n                        lat={marker.lat}\n                        lng={marker.lng}\n                        isFound={marker.isFound}\n                        url={marker.url}\n                        title={marker.title}\n                        desc={marker.desc}\n                        imgSrc={marker.imgSrc}\n                        onMarkButtonClick={onMarkButtonClick ? onMarkButtonClick(marker) : undefined}\n                        type={marker.type}\n                        subType={marker.subType}\n                        onAdd={onMarkerAdd}\n                    />\n\n                );\n\n            })}\n\n        </MapContainer>\n\n    );\n\n};\n\nexport default MojaveWastelandMap;\n","export default __webpack_public_path__ + \"static/media/fallout-nv-logo.35f1fe39.png\";","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MarkerListItem.scss';\nimport {\n    Button,\n    Checkbox,\n    Tooltip,\n} from '@chakra-ui/react';\n\nexport interface MarkerListItemProps {\n    tag?: React.ComponentType | keyof JSX.IntrinsicElements;\n    className?: string;\n    isFound?: boolean;\n    onMarkCheckboxChange?: React.InputHTMLAttributes<Element>['onChange'];\n    onMarkerTitleClick?: React.DOMAttributes<Element>['onClick'];\n    title?: string;\n}\n\nconst MarkerListItem = ({\n    tag = 'li',\n    className = '',\n    isFound = false,\n    onMarkCheckboxChange = undefined,\n    onMarkerTitleClick = undefined,\n    title = '',\n}: MarkerListItemProps = {}): JSX.Element => {\n\n    const Tag = tag;\n\n    return (\n\n        <Tag\n            className={classNames([\n                'marker-list-item',\n                className,\n            ])}\n        >\n\n            <Checkbox\n                className={classNames('marker-list-item__found-checkbox')}\n                isChecked={isFound}\n                onChange={onMarkCheckboxChange}\n                colorScheme=\"blue\"\n                size=\"lg\"\n            />\n\n            <Tooltip\n                label=\"Jump to Marker\"\n                placement=\"top\"\n                hasArrow={true}\n                openDelay={500}\n            >\n\n                <Button\n                    onClick={onMarkerTitleClick}\n                    size=\"md\"\n                    variant=\"link\"\n                    colorScheme=\"blue\"\n                    fontWeight=\"normal\"\n                    wordBreak=\"break-all\"\n                    whiteSpace=\"unset\"\n                    textAlign=\"left\"\n                >\n\n                    {title}\n\n                </Button>\n\n            </Tooltip>\n\n        </Tag>\n\n    );\n\n};\n\nexport default MarkerListItem;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MarkerTypePanel.scss';\nimport {\n    typesThatHaveSubTypes,\n    typeLabelMap,\n    typeColorMap,\n    subTypeSkillBookLabelMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n    MarkerType,\n    MarkerSubtype,\n} from 'types';\nimport MarkerListItem from 'Components/MarkerListItem/MarkerListItem';\nimport type { MarkerListItemProps } from 'Components/MarkerListItem/MarkerListItem';\nimport {\n    Box,\n    Button,\n    List,\n    ListItem,\n    Tooltip,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport interface MarkerTypePanelProps {\n    className?: string;\n    type?: MarkerType;\n    markers: Array<MarkerInterface>;\n    onMarkButtonClick?: (marker: MarkerInterface) => MarkerListItemProps['onMarkCheckboxChange'];\n    onTypeClick?: React.DOMAttributes<Element>['onClick'];\n    onMarkerTitleClick?: (marker: MarkerInterface) => MarkerListItemProps['onMarkerTitleClick'];\n}\n\nconst MarkerTypePanel = ({\n    className = '',\n    type = undefined,\n    markers = [],\n    onMarkButtonClick = undefined,\n    onTypeClick = undefined,\n    onMarkerTitleClick = undefined,\n}: MarkerTypePanelProps): JSX.Element => {\n\n    const hasSubTypes = type ? typesThatHaveSubTypes.includes(type) : false;\n\n    const subTypes: {\n        [index: string]: {\n            id: MarkerSubtype;\n            markers: Array<MarkerInterface>;\n        };\n    } = {};\n\n    if (hasSubTypes) {\n        markers.forEach((marker) => {\n            if (!marker.subType) {\n                return;\n            }\n            const subType = subTypes[marker.subType];\n\n            if (subType) {\n                // Already a object, just add the new marker to markers.\n                subType.markers.push(marker);\n            } else {\n                // Create object for sub type\n                subTypes[marker.subType] = {\n                    id: marker.subType,\n                    markers: [marker],\n                };\n            }\n        });\n    }\n\n    const renderMarkerListItem = (marker: MarkerInterface): JSX.Element => {\n\n        return (\n\n            <MarkerListItem\n                tag={ListItem}\n                key={marker.id}\n                isFound={marker.isFound}\n                onMarkCheckboxChange={onMarkButtonClick ? onMarkButtonClick(marker) : undefined}\n                onMarkerTitleClick={onMarkerTitleClick ? onMarkerTitleClick(marker) : undefined}\n                title={marker.title}\n            />\n\n        );\n\n    };\n\n    return (\n\n        <section\n            className={classNames([\n                'marker-type-panel',\n                className,\n            ])}\n        >\n\n            <header\n                className={classNames('marker-type-panel__header')}\n            >\n\n                <Box\n                    // color will be inherited from FontAwesomeIcon\n                    color={type ? typeColorMap[type] : undefined}\n                    className={classNames([\n                        'marker-type-panel__icon',\n                    ])}\n                >\n\n                    <FontAwesomeIcon\n                        icon={faMapMarkerAlt}\n                    />\n\n                </Box>\n\n                <Tooltip\n                    label=\"Only show this marker type\"\n                    placement=\"top\"\n                    hasArrow={true}\n                    openDelay={500}\n                >\n\n                    <Button\n                        variant=\"link\"\n                        colorScheme=\"blue\"\n                        className={classNames('marker-type-panel__header-btn')}\n                        onClick={onTypeClick}\n                    >\n\n                        {type ? typeLabelMap[type] : 'Misc'}\n\n                    </Button>\n\n                </Tooltip>\n\n            </header>\n\n            <List\n                className={classNames('marker-type-panel__list')}\n            >\n\n                {(hasSubTypes) ? Object.values(subTypes).map((subType) => {\n\n                    return (\n\n                        <ListItem\n                            className={classNames('marker-type-panel__sub-type-list-item')}\n                            key={subType.id}\n                        >\n\n                            <span\n                                className={classNames('marker-type-panel__sub-type-label')}\n                            >\n\n                                {/* TODO: Handle other sub types */}\n                                {subTypeSkillBookLabelMap[subType.id]}\n\n                            </span>\n\n                            <List>\n\n                                {subType.markers.map((marker) => renderMarkerListItem(marker))}\n\n                            </List>\n\n                        </ListItem>\n\n                    );\n\n                }) : markers.map((marker) => renderMarkerListItem(marker))}\n\n            </List>\n\n        </section>\n\n    );\n\n};\n\nexport default MarkerTypePanel;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './SettingsPanel.scss';\nimport FalloutNVLogoImageSrc from './fallout-nv-logo.png';\nimport MarkerTypePanel from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport type { MarkerTypePanelProps } from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport {\n    typeMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n    MarkerType,\n} from 'types';\nimport {\n    Button,\n    Checkbox,\n    Stack,\n    Tooltip,\n    Box,\n    Image,\n    Heading,\n    Link,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\n\nexport interface SettingsPanelProps {\n    className?: string;\n    markers: Array<MarkerInterface>;\n    onMarkButtonClick?: MarkerTypePanelProps['onMarkButtonClick'];\n    isFoundMarkersShown?: boolean;\n    onClickShowFoundMarkers?: React.InputHTMLAttributes<Element>['onChange'];\n    appVersion?: string;\n    onMarkerTitleClick?: MarkerTypePanelProps['onMarkerTitleClick'];\n    onShowAllClick?: React.DOMAttributes<Element>['onClick'];\n    onTypeClick?: (type: MarkerType) => MarkerTypePanelProps['onTypeClick'];\n    isLargeScreen?: boolean;\n}\n\nconst SettingsPanel = ({\n    className = '',\n    markers = [],\n    onMarkButtonClick = undefined,\n    isFoundMarkersShown = false,\n    onClickShowFoundMarkers = undefined,\n    appVersion = '',\n    onMarkerTitleClick = undefined,\n    onShowAllClick = undefined,\n    onTypeClick = undefined,\n    isLargeScreen = true,\n    // ...props\n}: SettingsPanelProps): JSX.Element => {\n\n    const skillBookMarkers = markers.filter((marker) => marker.type === typeMap.SkillBook);\n    const snowGlobeMarkers = markers.filter((marker) => marker.type === typeMap.SnowGlobe);\n\n    return (\n\n        <Box\n            as=\"section\"\n            className={classNames([\n                'settings-panel',\n                className,\n            ])}\n        >\n\n            <header\n                className={classNames('settings-panel__header')}\n            >\n\n                <figure\n                    className={classNames('settings-panel__logo')}\n                >\n\n                    <Image\n                        src={FalloutNVLogoImageSrc}\n                        alt=\"Fallout: New Vegas Logo\"\n                    />\n\n                </figure>\n\n                <Heading\n                    marginY=\"4\"\n                >\n                    Interactive Map\n                </Heading>\n\n                <Stack\n                    direction={isLargeScreen ? 'row' : 'column'}\n                    align=\"center\"\n                    justify=\"center\"\n                    spacing=\"4\"\n                >\n\n                    <Tooltip\n                        label=\"Show all marker types\"\n                        placement=\"top\"\n                        hasArrow={true}\n                    >\n\n                        <Button\n                            onClick={onShowAllClick}\n                            leftIcon={(\n                                <FontAwesomeIcon\n                                    icon={faEye}\n                                />\n                            )}\n                            variant=\"outline\"\n                        >\n                            Show All Types\n                        </Button>\n\n                    </Tooltip>\n\n                    <Checkbox\n                        isChecked={isFoundMarkersShown}\n                        onChange={onClickShowFoundMarkers}\n                        size=\"lg\"\n                    >\n\n                        <Tooltip\n                            label=\"If checked, markers 'marked as found' will still appear on the map.\"\n                            placement=\"top\"\n                            hasArrow={true}\n                        >\n\n                            Show Found Markers\n\n                        </Tooltip>\n\n                    </Checkbox>\n\n                </Stack>\n\n            </header>\n\n            <div\n                className={classNames('settings-panel__content')}\n            >\n\n                {/* TODO: iterate over typeMap values*/}\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SkillBook}\n                    markers={skillBookMarkers}\n                    onMarkButtonClick={onMarkButtonClick}\n                    onTypeClick={onTypeClick ? onTypeClick(typeMap.SkillBook) : undefined}\n                    onMarkerTitleClick={onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SnowGlobe}\n                    markers={snowGlobeMarkers}\n                    onMarkButtonClick={onMarkButtonClick}\n                    onTypeClick={onTypeClick ? onTypeClick(typeMap.SnowGlobe) : undefined}\n                    onMarkerTitleClick={onMarkerTitleClick}\n                />\n\n            </div>\n\n            <footer\n                className={classNames('settings-panel__footer')}\n            >\n\n                Created By\n\n                {' '}\n\n                <Link\n                    href=\"https://github.com/srt4rulez\"\n                    isExternal={true}\n                    color=\"blue.500\"\n                >\n                    srt4rulez\n                </Link>\n\n                {' | '}\n\n                v{appVersion}\n\n                {' | '}\n\n                <Link\n                    href=\"https://github.com/srt4rulez/fallout-new-vegas-interactive-map\"\n                    isExternal={true}\n                    color=\"blue.500\"\n                >\n                    View on Github\n                </Link>\n\n            </footer>\n\n        </Box>\n\n    );\n\n};\n\nexport default SettingsPanel;\n","import * as React from 'react';\nimport './App.scss';\nimport MojaveWastelandMap from 'Components/MojaveWastelandMap/MojaveWastelandMap';\nimport markersFromJson from 'Data/markers.json';\nimport SettingsPanel from 'Components/SettingsPanel/SettingsPanel';\nimport packageJson from './../../../package.json';\nimport type {\n    MarkerInterface,\n    MarkerType,\n} from 'types';\nimport type * as L from 'leaflet';\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    Button,\n} from '@chakra-ui/react';\n\nexport interface AppPropsInterface { // eslint-disable-line @typescript-eslint/no-empty-interface\n}\n\ninterface AppStateInterface {\n    markers: Array<MarkerInterface>;\n    isFoundMarkersShown?: boolean;\n    isLargeScreen?: boolean;\n    isSettingsDrawerOpen: boolean;\n}\n\nclass App extends React.Component<AppPropsInterface, AppStateInterface> {\n\n    state: AppStateInterface = {\n        markers: [],\n        isFoundMarkersShown: false,\n        isLargeScreen: true,\n        isSettingsDrawerOpen: false,\n    };\n\n    // Only used with L.Map API.\n    markers: {\n        [index: string]: L.Marker;\n    } = {};\n\n    private static version: string = packageJson.version;\n\n    private isLargeScreenMqList?: MediaQueryList;\n\n    componentDidMount(): void {\n        this.isLargeScreenMqList = window && (typeof window.matchMedia === 'function') ? window.matchMedia('(min-width: 1024px)') : undefined;\n\n        if (this.isLargeScreenMqList) {\n            this.isLargeScreenMqList.addEventListener('change', this.handleLargeScreenMqListChange);\n        }\n\n        const localStorageMarkersJson = window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = JSON.parse(localStorageMarkersJson) as Array<MarkerInterface>;\n\n        const newMarkers = (markersFromJson as Array<MarkerInterface>).map((marker) => {\n            const localStorageMarker = localStorageMarkers.find((item) => item.id === marker.id);\n\n            const newMarker = {\n                ...marker\n            };\n\n            if (localStorageMarker) {\n                newMarker.isFound = localStorageMarker.isFound;\n            }\n\n            return newMarker;\n        });\n\n        const localStorageIsFoundMarkersShown = window.localStorage.getItem('isFoundMarkersShown');\n\n        const defaultIsFoundMarkersShown = true;\n\n        const isFoundMarkersShown = localStorageIsFoundMarkersShown === null ? defaultIsFoundMarkersShown : localStorageIsFoundMarkersShown === '1';\n\n        this.setState({ // eslint-disable-line react/no-did-mount-set-state\n            markers: newMarkers,\n            isFoundMarkersShown: isFoundMarkersShown,\n            isLargeScreen: this.isLargeScreenMqList !== undefined ? this.isLargeScreenMqList.matches : true,\n        });\n    }\n\n    handleLargeScreenMqListChange = (event: MediaQueryListEvent): void => {\n\n        this.setState({\n            isLargeScreen: event.matches,\n        });\n\n    }\n\n    componentWillUnmount(): void {\n        if (this.isLargeScreenMqList) {\n            this.isLargeScreenMqList.removeEventListener('change', this.handleLargeScreenMqListChange);\n        }\n    }\n\n    handleMarkButtonClick = (marker: MarkerInterface = {}) => (event: React.MouseEvent | React.ChangeEvent): void => { // eslint-disable-line @typescript-eslint/no-unused-vars\n\n        this.setState((prevState: AppStateInterface) => {\n            const index = prevState.markers.findIndex((item) => item.id === marker.id);\n\n            if (index === -1) {\n                return null;\n            }\n\n            const oldMarker = prevState.markers[index];\n\n            const newMarkers = [...prevState.markers];\n\n            const newMarker = {\n                ...oldMarker,\n                isFound: !oldMarker.isFound,\n            };\n\n            this.updateLocalStorageMarker(newMarker);\n\n            newMarkers[index] = newMarker;\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * Set the marker in local storage as found or not.\n     */\n    updateLocalStorageMarker = (marker: MarkerInterface = {}): void => {\n        const localStorageMarkersJson = window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = [...JSON.parse(localStorageMarkersJson) as Array<MarkerInterface>];\n\n        const index = localStorageMarkers.findIndex((item) => item.id === marker.id);\n\n        if (index === -1) {\n            localStorageMarkers.push({\n                id: marker.id,\n                isFound: marker.isFound,\n            });\n        } else {\n            localStorageMarkers[index] = {\n                ...localStorageMarkers[index],\n                isFound: marker.isFound,\n            };\n        }\n\n        window.localStorage.setItem('markers', JSON.stringify(localStorageMarkers));\n    };\n\n    handleShowFoundMarkersClick = (): void => {\n\n        this.setState((prevState: AppStateInterface) => {\n\n            const newState = !prevState.isFoundMarkersShown;\n\n            window.localStorage.setItem('isFoundMarkersShown', newState ? '1' : '0');\n\n            return {\n                isFoundMarkersShown: newState,\n            };\n        });\n\n    };\n\n    /**\n     * Only show the currently clicked marker type.\n     */\n    handleTypeClick = (type: MarkerType) => (): void => {\n\n        this.setState((prevState: AppStateInterface) => {\n\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: marker.type !== type, // hide if the clicked type is not the type this marker is.\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n        this.handleSettingsDrawerClose();\n\n    };\n\n    /**\n     * Un-hide all marker types.\n     */\n    handleShowAllClick = (): void => {\n\n        this.setState((prevState: AppStateInterface) => {\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: false,\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n        this.handleSettingsDrawerClose();\n\n    };\n\n    handleMapCreation = (map: L.Map): void => {\n\n        map.on('click', (event: L.LeafletMouseEvent) => {\n            // Allow figuring out what lat + lng we are clicking.\n            if ((window as any).debug === true) { // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n                console.log(event.latlng);\n            }\n        });\n\n    };\n\n    handleMarkerTitleClick = (markerData: MarkerInterface = {}) => (): void => {\n\n        const marker = markerData.id && this.markers[markerData.id] || null;\n\n        if (marker && markerData.lat && markerData.lng) {\n            // Open the popup of the marker.\n            marker.openPopup([markerData.lat, markerData.lng]);\n        }\n\n        this.handleSettingsDrawerClose();\n\n    };\n\n    /**\n     * When a marker is added to the map, add it to our markers property for use\n     * with handleMarkerTitleClick.\n     */\n    handleMarkerAdd = (event: L.LeafletEvent): void => {\n\n        const marker = event.target as L.Marker;\n\n        const markerLatLng = marker.getLatLng();\n\n        const lat = markerLatLng.lat;\n        const lng = markerLatLng.lng;\n\n        const markerData: MarkerInterface | undefined = this.state.markers && this.state.markers.find((item) => item.lat === lat && item.lng === lng);\n\n        if (markerData && markerData.id) {\n            this.markers[markerData.id] = marker;\n        }\n\n    };\n\n    handleOpenSettingsClick = (): void => {\n\n        this.setState({\n            isSettingsDrawerOpen: true,\n        });\n\n    };\n\n    handleSettingsDrawerClose = (): void => {\n\n        this.setState({\n            isSettingsDrawerOpen: false,\n        });\n\n    };\n\n    renderSettingsPanel = (): JSX.Element => {\n\n        return (\n            <SettingsPanel\n                appVersion={App.version}\n                className=\"app__settings-panel\"\n                markers={this.state.markers}\n                onMarkButtonClick={this.handleMarkButtonClick}\n                isFoundMarkersShown={this.state.isFoundMarkersShown}\n                onClickShowFoundMarkers={this.handleShowFoundMarkersClick}\n                onTypeClick={this.handleTypeClick}\n                onShowAllClick={this.handleShowAllClick}\n                onMarkerTitleClick={this.handleMarkerTitleClick}\n                isLargeScreen={this.state.isLargeScreen}\n            />\n        );\n\n    };\n\n    render(): JSX.Element | null {\n\n        const AppSettingsPanel = this.renderSettingsPanel;\n\n        return (\n\n            <div\n                className=\"app\"\n            >\n\n                {this.state.isLargeScreen ? (\n\n                    <AppSettingsPanel />\n\n                ) : (\n\n                    <div\n                        className=\"app__small-screen-settings-button-container\"\n                    >\n\n                        <Button\n                            className=\"app__small-screen-settings-button\"\n                            onClick={this.handleOpenSettingsClick}\n                            colorScheme=\"teal\"\n                        >\n                            Open Settings\n                        </Button>\n\n                    </div>\n\n                )}\n\n                {/* Drawer for small screens */}\n                <Drawer\n                    isOpen={this.state.isSettingsDrawerOpen}\n                    placement=\"bottom\"\n                    onClose={this.handleSettingsDrawerClose}\n                    size=\"full\"\n                >\n\n                    <DrawerOverlay />\n\n                    <DrawerContent>\n\n                        <DrawerCloseButton\n                            zIndex=\"1\"\n                        />\n\n                        <DrawerBody\n                            paddingX=\"2\"\n                        >\n\n                            <AppSettingsPanel />\n\n                        </DrawerBody>\n\n                    </DrawerContent>\n\n                </Drawer>\n\n                <MojaveWastelandMap\n                    className=\"app__mojave-wasteland-map\"\n                    markers={this.state.markers}\n                    onMarkButtonClick={this.handleMarkButtonClick}\n                    isFoundMarkersShown={this.state.isFoundMarkersShown}\n                    onMapCreation={this.handleMapCreation}\n                    onMarkerAdd={this.handleMarkerAdd}\n                />\n\n            </div>\n\n        );\n\n    }\n\n}\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst theme = extendTheme({\n    fonts: {\n        heading: 'Roboto',\n        body: 'Roboto',\n    },\n});\n\nexport default theme;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet-defaulticon-compatibility';\nimport './index.scss';\nimport App from 'Components/App/App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport '@fontsource/roboto';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider\n            theme={theme}\n        >\n            <App />\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}