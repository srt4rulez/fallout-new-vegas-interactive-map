{"version":3,"sources":["Components/MojaveWastelandMap/mojave-wasteland-map.jpg","Data/marker-types.js","Components/MojaveWastelandMarker/MojaveWastelandMarker.js","Components/MojaveWastelandMap/MojaveWastelandMap.js","Components/SettingsPanel/fallout-nv-logo.png","Components/MarkerTypePanel/MarkerTypePanel.js","Components/SettingsPanel/SettingsPanel.js","Components/App/App.js","index.js"],"names":["typeMap","typeLabelMap","typeColorMap","MojaveWastelandMarker","props","icon","L","className","html","type","iconSize","iconAnchor","iconSizeX","popupAnchor","Marker","classNames","position","lat","lng","opacity","isFound","eventHandlers","add","onAdd","Popup","href","url","rel","target","title","desc","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","imgSrc","src","alt","onChange","onMarkButtonClick","checked","defaultProps","event","markers","isFoundMarkersShown","onMapCreation","onMarkerAdd","mapOptions","maxZoom","crs","Simple","bounds","MojaveWastelandMap","MapContainer","whenCreated","ImageOverlay","mojaveWastelandMapImageSrc","map","marker","isHidden","id","MarkerTypePanel","onClick","onTypeClick","onMarkerTitleClick","SettingsPanel","skillBookMarkers","filter","snowGlobeMarkers","uniqueWeaponMarkers","FalloutNVLogoImageSrc","onShowAllClick","onClickShowFoundMarkers","appVersion","App","handleMarkButtonClick","setState","prevState","index","findIndex","item","oldMarker","newMarkers","newMarker","updateLocalStorageMarker","localStorageMarkersJson","window","localStorage","getItem","localStorageMarkers","JSON","parse","push","setItem","stringify","handleShowFoundMarkersClick","newState","handleTypeClick","handleShowAllClick","handleMapCreation","mojaveWastelandMap","handleMarkerTitleClick","markerData","panTo","openPopup","handleMarkerAdd","markerLatLng","getLatLng","state","find","localStorageMarker","localStorageIsFoundMarkersShown","this","version","Component","packageJson","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9e8f79f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mojave-wasteland-map.a46f7234.jpg\";","const typeMap = {\n    SnowGlobe:    'snow_globe',\n    SkillBook:    'skill_book',\n    UniqueWeapon: 'unique_weapon',\n};\n\nconst typeLabelMap = {\n    [typeMap.SnowGlobe]:    'Snow Globe',\n    [typeMap.SkillBook]:    'Skill Book',\n    [typeMap.UniqueWeapon]: 'Unique Weapon',\n};\n\n// Bulma CSS colors.\nconst typeColorMap = {\n    [typeMap.SnowGlobe]:    'link',\n    [typeMap.SkillBook]:    'warning',\n    [typeMap.UniqueWeapon]: 'primary',\n};\n\nexport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MojaveWastelandMarker.scss';\nimport {\n    Marker,\n    Popup,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport DOMPurify from 'dompurify';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n} from 'Data/marker-types';\n\nconst propTypes = {\n    className: PropTypes.string,\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n    isFound: PropTypes.bool,\n    url: PropTypes.string,\n    title: PropTypes.string,\n    desc: PropTypes.string,\n    imgSrc: PropTypes.string,\n    onMarkButtonClick: PropTypes.func,\n    type: PropTypes.oneOf(Object.values(typeMap)),\n    onAdd: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    isFound: false,\n    url: '',\n    title: '',\n    desc: '',\n    imgSrc: '',\n    onMarkButtonClick: (event) => {},\n    type: '',\n    onAdd: () => {},\n};\n\nconst MojaveWastelandMarker = (props) => {\n\n    const iconSizeX = 25.5;\n    const iconSizeY = 34; // update this value first, then check width for setting X.\n\n    const icon = L.divIcon({\n        className: 'mojave-wasteland-marker__icon-wrapper',\n        html: `\n            <i\n                class=\"mojave-wasteland-marker__icon fas fa-map-marker-alt has-text-${typeColorMap[props.type]}\"\n                style=\"font-size: ${iconSizeY}px;\"\n            />\n        `,\n        iconSize: [\n            iconSizeX,\n            iconSizeY,\n        ],\n        iconAnchor: [\n            (iconSizeX / 2), // assuming the \"pin\" of the icon is in the middle of the icon.\n            iconSizeY,\n        ],\n        popupAnchor: [\n            0,\n            (-(iconSizeY) - 3), // 3 = spacing between icon and popup arrow.\n        ],\n    });\n\n    return (\n\n        <Marker\n            className={classNames([\n                'mojave-wasteland-marker',\n                props.className,\n            ])}\n            position={[props.lat, props.lng]}\n            opacity={props.isFound ? 0.5 : 1}\n            icon={icon}\n            eventHandlers={{\n                add: props.onAdd,\n            }}\n        >\n\n            <Popup>\n\n                <h2\n                    className=\"title is-4\"\n                >\n                    <a\n                        href={props.url}\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                    >\n                        {props.title}\n                    </a>\n                </h2>\n\n                {typeLabelMap[props.type] && (\n\n                    <div\n                        className=\"tags has-addons is-justify-content-center\"\n                    >\n\n                        <span\n                            className=\"tag is-dark mb-0\"\n                        >\n                            type\n                        </span>\n\n                        <span\n                            className={classNames([\n                                'tag',\n                                'mb-0',\n                                'is-lowercase',\n                                `is-${typeColorMap[props.type]}`,\n                            ])}\n                        >\n                            {typeLabelMap[props.type]}\n                        </span>\n\n                    </div>\n\n                )}\n\n                {props.desc && (\n\n                    <p\n                        className=\"content\"\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(props.desc),\n                        }}\n                    />\n\n                )}\n\n                {props.imgSrc && (\n\n                    <figure\n                        className=\"image block\"\n                    >\n\n                        <img\n                            src={props.imgSrc}\n                            alt={props.title}\n                        />\n\n                    </figure>\n\n                )}\n\n                <label\n                    className=\"checkbox button is-fullwidth\"\n                >\n\n                    <input\n                        className=\"mr-1\"\n                        onChange={props.onMarkButtonClick}\n                        type=\"checkbox\"\n                        checked={props.isFound}\n                    />\n\n                    Mark As Found\n\n                </label>\n\n            </Popup>\n\n        </Marker>\n\n    );\n\n};\n\nMojaveWastelandMarker.propTypes = propTypes;\nMojaveWastelandMarker.defaultProps = defaultProps;\n\nexport default MojaveWastelandMarker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MojaveWastelandMap.scss';\nimport {\n    MapContainer,\n    ImageOverlay,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport mojaveWastelandMapImageSrc from './mojave-wasteland-map.jpg';\nimport MojaveWastelandMarker from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\n\nconst propTypes = {\n    className: PropTypes.string,\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    isFoundMarkersShown: PropTypes.bool,\n    onMapCreation: PropTypes.func,\n    onMarkerAdd: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    markers: [],\n    onMarkButtonClick: (marker = {}) => (event) => {},\n    isFoundMarkersShown: true,\n    onMapCreation: () => {},\n    onMarkerAdd: () => {},\n};\n\n/**\n * @type {Object}\n *\n * @see https://react-leaflet.js.org/docs/api-map#mapcontainer\n *\n * These props are immutable.\n */\nconst mapOptions = {\n    maxZoom: 4,\n    crs: L.CRS.Simple,\n    bounds: [\n        [0, 0],\n        [1024, 1024], // for now, this is just the size of the map image.\n    ],\n};\n\nconst MojaveWastelandMap = (props) => {\n\n    return (\n\n        <MapContainer\n            className={classNames([\n                'mojave-wasteland-map',\n                props.className,\n            ])}\n            {...mapOptions}\n            whenCreated={props.onMapCreation}\n        >\n\n            <ImageOverlay\n                url={mojaveWastelandMapImageSrc}\n                bounds={mapOptions.bounds}\n            />\n\n            {props.markers.map((marker) => {\n\n                if (!marker.lat || !marker.lng) {\n                    return null;\n                }\n\n                // Don't render found items.\n                if (!props.isFoundMarkersShown && marker.isFound) {\n                    return null;\n                }\n\n                if (marker.isHidden) {\n                    return null;\n                }\n\n                return (\n\n                    <MojaveWastelandMarker\n                        key={marker.id}\n                        lat={marker.lat}\n                        lng={marker.lng}\n                        isFound={marker.isFound}\n                        url={marker.url}\n                        title={marker.title}\n                        desc={marker.desc}\n                        imgSrc={marker.imgSrc}\n                        onMarkButtonClick={props.onMarkButtonClick(marker)}\n                        type={marker.type}\n                        onAdd={props.onMarkerAdd}\n                    />\n\n                );\n\n            })}\n\n        </MapContainer>\n\n    );\n\n};\n\nMojaveWastelandMap.propTypes = propTypes;\nMojaveWastelandMap.defaultProps = defaultProps;\n\nexport default MojaveWastelandMap;\n","export default __webpack_public_path__ + \"static/media/fallout-nv-logo.35f1fe39.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MarkerTypePanel.scss';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n} from 'Data/marker-types';\n\nconst propTypes = {\n    className: PropTypes.string,\n    type: PropTypes.oneOf(Object.values(typeMap)),\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    onTypeClick: PropTypes.func,\n    onMarkerTitleClick: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    type: '',\n    markers: [],\n    onMarkButtonClick: (marker = {}) => (event) => {},\n    onTypeClick: (event) => {},\n    onMarkerTitleClick: (marker = {}) => (event) => {},\n};\n\nconst MarkerTypePanel = (props) => {\n\n    return (\n\n        <section\n            className={classNames([\n                'marker-type-panel',\n                props.className,\n            ])}\n        >\n\n            <header\n                className={classNames('marker-type-panel__header')}\n            >\n\n                <i\n                    className={classNames([\n                        'marker-type-panel__icon',\n                        'fas',\n                        'fa-map-marker-alt',\n                        `has-text-${typeColorMap[props.type]}`,\n                    ])}\n                />\n\n                <button\n                    type=\"button\"\n                    className={classNames('marker-type-panel__header-btn')}\n                    title=\"Only show this marker type\"\n                    onClick={props.onTypeClick}\n                >\n\n                    {typeLabelMap[props.type] || 'Misc'}\n\n                </button>\n\n            </header>\n\n            <ul\n                className={classNames('marker-type-panel__list')}\n            >\n\n                {props.markers.map((marker) => {\n\n                    return (\n\n                        <li\n                            key={marker.id}\n                            className={classNames('marker-type-panel__list-item')}\n                        >\n\n                            <input\n                                className={classNames('marker-type-panel__item-checkbox')}\n                                type=\"checkbox\"\n                                checked={marker.isFound}\n                                onChange={props.onMarkButtonClick(marker)}\n                                title=\"Mark As Found\"\n                            />\n\n                            <button\n                                className={classNames('marker-type-panel__item-link')}\n                                onClick={props.onMarkerTitleClick(marker)}\n                            >\n\n                                {marker.title}\n\n                            </button>\n\n                        </li>\n\n                    );\n\n                })}\n\n            </ul>\n\n        </section>\n\n    );\n\n};\n\nMarkerTypePanel.propTypes = propTypes;\nMarkerTypePanel.defaultProps = defaultProps;\n\nexport default MarkerTypePanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './SettingsPanel.scss';\nimport FalloutNVLogoImageSrc from './fallout-nv-logo.png';\nimport MarkerTypePanel from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport { typeMap } from 'Data/marker-types';\n\nconst propTypes = {\n    className: PropTypes.string,\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    isFoundMarkersShown: PropTypes.bool,\n    onClickShowFoundMarkers: PropTypes.func,\n    appVersion: PropTypes.string,\n    onMarkerTitleClick: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    markers: [],\n    onMarkButtonClick: () => {},\n    isFoundMarkersShown: true,\n    onClickShowFoundMarkers: () => {},\n    appVersion: '',\n    onMarkerTitleClick: () => {},\n};\n\nconst SettingsPanel = (props) => {\n\n    const skillBookMarkers = props.markers.filter((marker) => marker.type === 'skill_book');\n    const snowGlobeMarkers = props.markers.filter((marker) => marker.type === 'snow_globe');\n    const uniqueWeaponMarkers = props.markers.filter((marker) => marker.type === 'unique_weapon');\n\n    return (\n\n        <section\n            className={classNames([\n                'settings-panel',\n                'box',\n                props.className,\n            ])}\n        >\n\n            <header\n                className={classNames('settings-panel__header')}\n            >\n\n                <figure\n                    className={classNames('settings-panel__logo', 'image')}\n                >\n\n                    <img\n                        src={FalloutNVLogoImageSrc}\n                        alt=\"Fallout: New Vegas Logo\"\n                    />\n\n                </figure>\n\n                <h2\n                    className=\"title is-2\"\n                >\n                    Interactive Map\n                </h2>\n\n                <div\n                    className=\"buttons is-centered\"\n                >\n\n                    <button\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={props.onShowAllClick}\n                        title=\"Show all marker types\"\n                    >\n\n                        <span\n                            className=\"icon\"\n                        >\n\n                            <i\n                                className=\"far fa-eye\"\n                            />\n\n                        </span>\n\n                        <span>Show All Types</span>\n\n                    </button>\n\n                    <label\n                        className=\"settings-panel__show-found-markers-btn checkbox button\"\n                        title=\"If checked, markers 'marked as found' will still appear on the map.\"\n                    >\n\n                        <input\n                            className=\"mr-1\"\n                            type=\"checkbox\"\n                            checked={props.isFoundMarkersShown}\n                            onChange={props.onClickShowFoundMarkers}\n                        />\n\n                        {' '}\n\n                        Show Found Markers\n\n                    </label>\n\n                </div>\n\n            </header>\n\n            <div\n                className={classNames('settings-panel__content')}\n            >\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SkillBook}\n                    markers={skillBookMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.SkillBook)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SnowGlobe}\n                    markers={snowGlobeMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.SnowGlobe)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.UniqueWeapon}\n                    markers={uniqueWeaponMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.UniqueWeapon)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n            </div>\n\n            <footer\n                className={classNames('settings-panel__footer')}\n            >\n\n                Created By\n\n                {' '}\n\n                <a\n                    href=\"https://github.com/srt4rulez\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                >\n                    srt4rulez\n                </a>\n\n                {' | '}\n\n                v{props.appVersion}\n\n                {' | '}\n\n                <a\n                    href=\"https://github.com/srt4rulez/fallout-new-vegas-interactive-map\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                >\n                    View on Github\n                </a>\n\n            </footer>\n\n        </section>\n\n    );\n\n};\n\nSettingsPanel.propTypes = propTypes;\nSettingsPanel.defaultProps = defaultProps;\n\nexport default SettingsPanel;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport MojaveWastelandMap from 'Components/MojaveWastelandMap/MojaveWastelandMap';\nimport markers from 'Data/markers.json';\nimport SettingsPanel from 'Components/SettingsPanel/SettingsPanel';\nimport packageJson from './../../../package.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        // Only used with L.Map API.\n        this.markers = {};\n\n        // L.Map instance.\n        this.mojaveWastelandMap = null;\n    }\n\n    static version = packageJson.version;\n\n    componentDidMount() {\n        const localStorageMarkersJson= window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = JSON.parse(localStorageMarkersJson);\n\n        const newMarkers = markers.map((marker) => {\n            const localStorageMarker = localStorageMarkers.find((item) => item.id === marker.id);\n\n            if (localStorageMarker) {\n                marker.isFound = localStorageMarker.isFound;\n            }\n\n            return marker;\n        });\n\n        const localStorageIsFoundMarkersShown = window.localStorage.getItem('isFoundMarkersShown');\n\n        const defaultIsFoundMarkersShown = true;\n\n        const isFoundMarkersShown = localStorageIsFoundMarkersShown === null ? defaultIsFoundMarkersShown : localStorageIsFoundMarkersShown === '1';\n\n        this.setState({\n            markers: newMarkers,\n            isFoundMarkersShown: isFoundMarkersShown,\n        });\n    }\n\n    handleMarkButtonClick = (marker = {}) => (event) => {\n\n        this.setState((prevState) => {\n            const index = prevState.markers.findIndex((item) => item.id === marker.id);\n\n            if (index === -1) {\n                return {};\n            }\n\n            const oldMarker = prevState.markers[index] || {};\n\n            const newMarkers = [...prevState.markers];\n\n            const newMarker = {\n                ...oldMarker,\n                isFound: !oldMarker.isFound,\n            };\n\n            this.updateLocalStorageMarker(newMarker);\n\n            newMarkers[index] = newMarker;\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * Set the marker in local storage as found or not.\n     *\n     * @param {Object} marker\n     */\n    updateLocalStorageMarker = (marker = {}) => {\n        const localStorageMarkersJson= window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = [...JSON.parse(localStorageMarkersJson)];\n\n        const index = localStorageMarkers.findIndex((item) => item.id === marker.id);\n\n        if (index === -1) {\n            localStorageMarkers.push({\n                id: marker.id,\n                isFound: marker.isFound,\n            });\n        } else {\n            localStorageMarkers[index] = {\n                ...localStorageMarkers[index],\n                isFound: marker.isFound,\n            };\n        }\n\n        window.localStorage.setItem('markers', JSON.stringify(localStorageMarkers));\n    };\n\n    handleShowFoundMarkersClick = () => {\n\n        this.setState((prevState) => {\n\n            const newState = !prevState.isFoundMarkersShown;\n\n            window.localStorage.setItem('isFoundMarkersShown', newState ? '1' : '0');\n\n            return {\n                isFoundMarkersShown: newState,\n            };\n        });\n\n    };\n\n    /**\n     * Only show the currently clicked marker type.\n     *\n     * @param {String} type\n     */\n    handleTypeClick = (type) => () => {\n\n        this.setState((prevState) => {\n\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: marker.type !== type,\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * Un-hide all marker types.\n     */\n    handleShowAllClick = () => {\n\n        this.setState((prevState) => {\n\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: false,\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * @param {L.Map} map\n     */\n    handleMapCreation = (map) => {\n\n        this.mojaveWastelandMap = map;\n\n    };\n\n    handleMarkerTitleClick = (markerData = {}) => () => {\n\n        if (!this.mojaveWastelandMap) {\n            return;\n        }\n\n        // Go to the marker on the map.\n        this.mojaveWastelandMap.panTo([\n            markerData.lat,\n            markerData.lng,\n        ]);\n\n        /**\n         * @var {L.Marker|null}\n         */\n        const marker = this.markers[markerData.id] || null;\n\n        if (marker) {\n            // Open the popup of the marker.\n            marker.openPopup([markerData.lat, markerData.lng]);\n        }\n\n    };\n\n    /**\n     * When a marker is added to the map, add it to our markers property for use\n     * with handleMarkerTitleClick.\n     *\n     * @param {Event} event\n     */\n    handleMarkerAdd = (event) => {\n\n        /**\n         * @var {L.Marker}\n         */\n        const marker = event.target;\n\n        const markerLatLng = marker.getLatLng();\n\n        const lat = markerLatLng.lat;\n        const lng = markerLatLng.lng;\n\n        /**\n         * @var {Object}\n         */\n        const markerData = this.state.markers.find((item) => item.lat === lat && item.lng === lng);\n\n        if (markerData) {\n            this.markers[markerData.id] = marker;\n        }\n\n    };\n\n    render() {\n\n        return (\n\n            <div\n                className=\"app\"\n            >\n\n                <SettingsPanel\n                    appVersion={App.version}\n                    className=\"app__settings-panel\"\n                    markers={this.state.markers}\n                    onMarkButtonClick={this.handleMarkButtonClick}\n                    isFoundMarkersShown={this.state.isFoundMarkersShown}\n                    onClickShowFoundMarkers={this.handleShowFoundMarkersClick}\n                    onTypeClick={this.handleTypeClick}\n                    onShowAllClick={this.handleShowAllClick}\n                    onMarkerTitleClick={this.handleMarkerTitleClick}\n                />\n\n                <MojaveWastelandMap\n                    className=\"app__mojave-wasteland-map\"\n                    markers={this.state.markers}\n                    onMarkButtonClick={this.handleMarkButtonClick}\n                    isFoundMarkersShown={this.state.isFoundMarkersShown}\n                    onMapCreation={this.handleMapCreation}\n                    onMarkerAdd={this.handleMarkerAdd}\n                />\n\n            </div>\n\n        );\n\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet-defaulticon-compatibility';\nimport './index.scss';\nimport App from 'Components/App/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}