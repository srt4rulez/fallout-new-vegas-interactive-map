{"version":3,"sources":["Components/MojaveWastelandMap/mojave-wasteland-map.jpg","types.ts","Components/MojaveWastelandMarker/MojaveWastelandMarker.tsx","Slices/appSlice.ts","hooks.ts","Components/MojaveWastelandMap/MojaveWastelandMap.tsx","Components/SettingsPanel/fallout-nv-logo.png","Components/MarkerListItem/MarkerListItem.tsx","Components/MarkerTypePanel/MarkerTypePanel.tsx","Components/SettingsPanel/SettingsPanel.tsx","Components/App/App.tsx","theme.ts","store.ts","index.tsx"],"names":["typeMap","typesThatHaveSubTypes","typeLabelMap","typeColorMap","typeColorScheme","subTypeSkillBookSubMap","subTypeSkillBookLabelMap","MojaveWastelandMarker","isFound","url","title","desc","imgSrc","lat","lng","onMarkButtonClick","undefined","type","subType","onAdd","MarkerIcon","sx","color","replace","fontSize","className","classNames","icon","faMapMarkerAlt","L","html","ReactDomServer","renderToStaticMarkup","iconSize","iconAnchor","iconSizeX","popupAnchor","Marker","position","opacity","eventHandlers","add","Popup","fontFamily","as","size","marginBottom","href","isExternal","variant","marginLeft","colorScheme","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","src","alt","onClick","width","leftIcon","isChecked","React","appSlice","createSlice","name","initialState","markers","isFoundMarkersShown","reducers","toggleMarkerAsFound","state","action","marker","payload","index","findIndex","item","id","toggleShowFoundMarkers","filterMarkerType","forEach","isHidden","showAllMarkers","actions","selectMarkers","app","selectSkillBookMarkers","filter","selectSnowGlobeMarkers","selectIsFoundMarkersShown","useAppDispatch","useDispatch","useAppSelector","useSelector","bounds","MojaveWastelandMap","onMapCreation","onMarkerAdd","dispatch","MapContainer","maxZoom","crs","Simple","whenCreated","ImageOverlay","mojaveWastelandMapImageSrc","map","handleMarkButtonClick","MarkerListItem","tag","onMarkCheckboxChange","onMarkerTitleClick","Tag","onChange","label","placement","hasArrow","openDelay","fontWeight","wordBreak","whiteSpace","textAlign","MarkerTypePanel","onTypeClick","hasSubTypes","includes","subTypes","push","renderMarkerListItem","ListItem","Object","values","SettingsPanel","appVersion","onShowAllClick","isLargeScreen","skillBookMarkers","snowGlobeMarkers","handleTypeClick","FalloutNVLogoImageSrc","marginY","direction","align","justify","spacing","event","faEye","App","isSettingsDrawerOpen","setIsSettingsDrawerOpen","markersRef","useMedia","toast","useToast","useEffectOnce","window","localStorage","getItem","description","status","isClosable","duration","removeItem","handleSettingsDrawerClose","handleShowAllClick","handleMarkerTitleClick","markerData","current","openPopup","AppSettingsPanel","packageJson","version","isOpen","onClose","zIndex","paddingX","on","debug","console","log","latlng","leafLetMarker","target","theme","extendTheme","fonts","heading","body","appTransformer","createTransform","inboundState","newMarkers","outboundState","v2Markers","v2MarkerIndex","v2Marker","Boolean","whitelist","persistConfig","key","storage","transforms","persistedReducer","persistReducer","combineReducers","appReducer","setItem","oldMarkersAsString","JSON","parse","oldMarker","newMarkerIndex","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","preloadedState","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9be237bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mojave-wasteland-map.a46f7234.jpg\";","const typeMap = {\n    SnowGlobe: 'snow_globe',\n    SkillBook: 'skill_book',\n} as const;\n\nexport type SnowGlobe = typeof typeMap.SnowGlobe;\nexport type SkillBook = typeof typeMap.SkillBook;\n\nexport type MarkerType = SnowGlobe | SkillBook;\n\nexport type TypesThatHaveSubTypes = SkillBook;\n\nconst typesThatHaveSubTypes: Array<string> = [\n    typeMap.SkillBook,\n];\n\nconst typeLabelMap = {\n    [typeMap.SnowGlobe]: 'Snow Globe',\n    [typeMap.SkillBook]: 'Skill Book',\n} as const;\n\n// Charka theme colors.\nconst typeColorMap = {\n    [typeMap.SnowGlobe]: 'green.500',\n    [typeMap.SkillBook]: 'yellow.300',\n} as const;\n\nconst typeColorScheme = {\n    [typeMap.SnowGlobe]: 'green',\n    [typeMap.SkillBook]: 'yellow',\n} as const;\n\nconst subTypeSkillBookSubMap = {\n    ChineseArmySpecialOpsTrainingManual: 'casotm',\n    WastelandSurvivalGuide:              'wsg',\n    BigBookOfScience:                    'bbos',\n    DCJournalOfInternalMedicine:         'dcjoim',\n    DeansElectronics:                    'de',\n    DuckAndCover:                        'dac',\n    GrognakTheBarbarian:                 'gtb',\n    GunsAndBullets:                      'gab',\n    LyingCongressionalStyle:             'lcs',\n    NikolaTeslaAndYou:                   'ntay',\n    PugilismIllustrated:                 'pi',\n    TalesOfAJunktownJerkyVendor:         'toajjv',\n    TumblersToday:                       'tt',\n} as const;\n\nexport type ChineseArmySpecialOpsTrainingManual = typeof subTypeSkillBookSubMap.ChineseArmySpecialOpsTrainingManual;\nexport type WastelandSurvivalGuide              = typeof subTypeSkillBookSubMap.WastelandSurvivalGuide;\nexport type BigBookOfScience                    = typeof subTypeSkillBookSubMap.BigBookOfScience;\nexport type DCJournalOfInternalMedicine         = typeof subTypeSkillBookSubMap.DCJournalOfInternalMedicine;\nexport type DeansElectronics                    = typeof subTypeSkillBookSubMap.DeansElectronics;\nexport type DuckAndCover                        = typeof subTypeSkillBookSubMap.DuckAndCover;\nexport type GrognakTheBarbarian                 = typeof subTypeSkillBookSubMap.GrognakTheBarbarian;\nexport type GunsAndBullets                      = typeof subTypeSkillBookSubMap.GunsAndBullets;\nexport type LyingCongressionalStyle             = typeof subTypeSkillBookSubMap.LyingCongressionalStyle;\nexport type NikolaTeslaAndYou                   = typeof subTypeSkillBookSubMap.NikolaTeslaAndYou;\nexport type PugilismIllustrated                 = typeof subTypeSkillBookSubMap.PugilismIllustrated;\nexport type TalesOfAJunktownJerkyVendor         = typeof subTypeSkillBookSubMap.TalesOfAJunktownJerkyVendor;\nexport type TumblersToday                       = typeof subTypeSkillBookSubMap.TumblersToday;\n\nexport type SkillBookSubTypes =\n    ChineseArmySpecialOpsTrainingManual\n    | WastelandSurvivalGuide\n    | BigBookOfScience\n    | DCJournalOfInternalMedicine\n    | DeansElectronics\n    | DuckAndCover\n    | GrognakTheBarbarian\n    | GunsAndBullets\n    | LyingCongressionalStyle\n    | NikolaTeslaAndYou\n    | PugilismIllustrated\n    | TalesOfAJunktownJerkyVendor\n    | TumblersToday\n;\n\nexport type MarkerSubtype = SkillBookSubTypes;\n\nconst subTypeSkillBookLabelMap = {\n    [subTypeSkillBookSubMap.BigBookOfScience]:                    'Big Book of Science (Science)',\n    [subTypeSkillBookSubMap.ChineseArmySpecialOpsTrainingManual]: 'Chinese Army: Special Ops Training Manual (Sneak)',\n    [subTypeSkillBookSubMap.DCJournalOfInternalMedicine]:         'D.C. Journal of Internal Medicine (Medicine)',\n    [subTypeSkillBookSubMap.DeansElectronics]:                    'Dean\\'s Electronics (Repair)',\n    [subTypeSkillBookSubMap.DuckAndCover]:                        'Duck and Cover! (Explosives)',\n    [subTypeSkillBookSubMap.GrognakTheBarbarian]:                 'Grognak the Barbarian (Melee Weapons)',\n    [subTypeSkillBookSubMap.GunsAndBullets]:                      'Guns and Bullets (Guns)',\n    [subTypeSkillBookSubMap.LyingCongressionalStyle]:             'Lying, Congressional Style (Speech)',\n    [subTypeSkillBookSubMap.NikolaTeslaAndYou]:                   'Nikola Tesla and You (Energy Weapons)',\n    [subTypeSkillBookSubMap.PugilismIllustrated]:                 'Pugilism Illustrated (Unarmed)',\n    [subTypeSkillBookSubMap.TalesOfAJunktownJerkyVendor]:         'Tales of a Junktown Jerky Vendor (Barter)',\n    [subTypeSkillBookSubMap.TumblersToday]:                       'Tumblers Today (Lockpick)',\n    [subTypeSkillBookSubMap.WastelandSurvivalGuide]:              'Wasteland Survival Guide (Survival)',\n} as const;\n\nexport interface MarkerInterface {\n    id?: string;\n    type?: MarkerType;\n    subType?: MarkerSubtype;\n    title?: string;\n    desc?: string;\n    url?: string;\n    imgSrc?: string;\n    lat?: number;\n    lng?: number;\n    isFound?: boolean;\n    isHidden?: boolean;\n}\n\nexport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    typeColorScheme,\n    typesThatHaveSubTypes,\n    subTypeSkillBookSubMap,\n    subTypeSkillBookLabelMap,\n};\n\n","import * as React from 'react';\nimport ReactDomServer from 'react-dom/server';\nimport classNames from 'classnames';\nimport './MojaveWastelandMarker.scss';\nimport {\n    Marker,\n    Popup,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport DOMPurify from 'dompurify';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    typeColorScheme,\n    subTypeSkillBookLabelMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n} from 'types';\nimport {\n    Button,\n    Checkbox,\n    Link,\n    Heading,\n    Text,\n    Badge,\n    Image,\n    Box,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport interface MojaveWastelandMarkerProps extends MarkerInterface {\n    // className?: string;\n    onMarkButtonClick?: React.DOMAttributes<Element>['onClick'];\n    onAdd?: L.LeafletEventHandlerFn;\n}\n\nconst MojaveWastelandMarker = ({\n    // className = '',\n    isFound = false,\n    url = '',\n    title = '',\n    desc = '',\n    imgSrc = '',\n    lat = 0,\n    lng = 0,\n    onMarkButtonClick = undefined,\n    type,\n    subType,\n    onAdd = undefined,\n}: MojaveWastelandMarkerProps): JSX.Element => {\n\n    const iconSizeX = 25.5;\n    const iconSizeY = 34; // update this value first, then check width for setting X.\n\n    const MarkerIcon = (\n        <Box\n            // color will be inherited from FontAwesomeIcon\n            sx={{\n                // use css variable directly\n                color: type ? `var(--chakra-colors-${typeColorMap[type].replace('.', '-')})` : '',\n            }}\n            fontSize={iconSizeY}\n            className={classNames([\n                'mojave-wasteland-marker__icon',\n            ])}\n        >\n\n            <FontAwesomeIcon\n                icon={faMapMarkerAlt}\n            />\n\n        </Box>\n    );\n\n    const icon = L.divIcon({\n        className: 'mojave-wasteland-marker__icon-wrapper',\n        html: ReactDomServer.renderToStaticMarkup(MarkerIcon),\n        iconSize: [\n            iconSizeX,\n            iconSizeY,\n        ],\n        iconAnchor: [\n            (iconSizeX / 2), // assuming the \"pin\" of the icon is in the middle of the icon.\n            iconSizeY,\n        ],\n        popupAnchor: [\n            0,\n            -(iconSizeY),\n        ],\n    });\n\n    return (\n\n        <Marker\n            // className={classNames([\n            //     'mojave-wasteland-marker',\n            //     className,\n            // ])}\n            position={[lat, lng]}\n            opacity={isFound ? 0.5 : 1}\n            icon={icon}\n            eventHandlers={{\n                add: onAdd,\n            }}\n        >\n\n            <Popup>\n\n                <Box\n                    // override leaflets font declaration\n                    fontFamily=\"body\"\n                >\n\n                    <Heading\n                        as=\"h3\"\n                        size=\"lg\"\n                        marginBottom=\"4\"\n                    >\n\n                        <Link\n                            href={url}\n                            isExternal={true}\n                        >\n\n                            {type === typeMap.SkillBook && subType && subTypeSkillBookLabelMap[subType] && `${subTypeSkillBookLabelMap[subType]} - `}\n\n                            {title}\n\n                        </Link>\n\n                    </Heading>\n\n                    <Badge\n                        variant=\"solid\"\n                        marginLeft=\"2\"\n                        colorScheme={type ? typeColorScheme[type] : undefined}\n                    >\n                        {type && typeLabelMap[type]}\n                    </Badge>\n\n                    {desc && (\n\n                        <Text\n                            className={classNames('mojave-wasteland-marker__desc')}\n                            dangerouslySetInnerHTML={{ // eslint-disable-line react/no-danger\n                                __html: DOMPurify.sanitize(desc),\n                            }}\n                        />\n\n                    )}\n\n                    {imgSrc && (\n\n                        <Image\n                            src={imgSrc}\n                            alt={title}\n                            marginBottom=\"4\"\n                        />\n\n                    )}\n\n                    <Button\n                        onClick={onMarkButtonClick}\n                        width=\"100%\"\n                        variant=\"outline\"\n                        leftIcon={(\n                            <Checkbox\n                                isChecked={isFound}\n                            />\n                        )}\n                        colorScheme=\"blue\"\n                    >\n\n                        Mark As Found\n\n                    </Button>\n\n                </Box>\n\n            </Popup>\n\n        </Marker>\n\n    );\n\n};\n\nexport default React.memo(MojaveWastelandMarker);\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport type {\n    MarkerInterface,\n    MarkerType,\n} from 'types';\nimport {\n    typeMap,\n} from 'types';\n\ninterface AppStateInterface {\n    markers: Array<MarkerInterface>;\n    isFoundMarkersShown?: boolean;\n}\n\nconst initialState: AppStateInterface = {\n    markers: [],\n    isFoundMarkersShown: false,\n};\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        toggleMarkerAsFound: (state: AppStateInterface, action: PayloadAction<MarkerInterface>): void => {\n            const marker = action.payload;\n\n            const index = state.markers.findIndex((item) => item.id === marker.id);\n\n            if (index !== -1) {\n                state.markers[index].isFound = !(state.markers[index].isFound);\n            }\n        },\n        toggleShowFoundMarkers: (state: AppStateInterface): void => {\n            state.isFoundMarkersShown = !state.isFoundMarkersShown;\n        },\n        filterMarkerType: (state: AppStateInterface, action: PayloadAction<MarkerType>): void => {\n            const type = action.payload;\n\n            state.markers.forEach((marker) => {\n                marker.isHidden = marker.type !== type; // hide if the clicked type is not the type this marker is.\n            });\n        },\n        showAllMarkers: (state: AppStateInterface): void => {\n            state.markers.forEach((marker) => {\n                marker.isHidden = false;\n            });\n        },\n    },\n});\n\nexport const {\n    toggleMarkerAsFound,\n    toggleShowFoundMarkers,\n    filterMarkerType,\n    showAllMarkers,\n} = appSlice.actions;\n\ninterface StateSelector {\n    app: AppStateInterface;\n}\n\nexport const selectMarkers          = (state: StateSelector): AppStateInterface['markers'] => state.app.markers;\nexport const selectSkillBookMarkers = (state: StateSelector): AppStateInterface['markers'] => state.app.markers.filter((marker: MarkerInterface) => marker.type === typeMap.SkillBook);\nexport const selectSnowGlobeMarkers = (state: StateSelector): AppStateInterface['markers'] => state.app.markers.filter((marker: MarkerInterface) => marker.type === typeMap.SnowGlobe);\n\nexport const selectIsFoundMarkersShown = (state: StateSelector): AppStateInterface['isFoundMarkersShown'] => state.app.isFoundMarkersShown;\n\nexport default appSlice.reducer;\n","import {\n    useDispatch,\n    useSelector,\n} from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MojaveWastelandMap.scss';\nimport {\n    MapContainer,\n    ImageOverlay,\n} from 'react-leaflet';\nimport type {\n    MapContainerProps,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport mojaveWastelandMapImageSrc from './mojave-wasteland-map.jpg';\nimport MojaveWastelandMarker from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\nimport type { MojaveWastelandMarkerProps } from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\nimport type {\n    MarkerInterface,\n} from 'types';\nimport {\n    selectIsFoundMarkersShown,\n    selectMarkers,\n    toggleMarkerAsFound,\n} from 'Slices/appSlice';\nimport {\n    useAppDispatch,\n    useAppSelector,\n} from 'hooks';\n\nconst bounds = new L.LatLngBounds({\n    lat: 0,\n    lng: 0,\n}, {\n    // for now, this is just the size of the map image.\n    lat: 1024,\n    lng: 1024\n});\n\nexport interface MojaveWastelandMapProps {\n    className?: string;\n    onMapCreation?: MapContainerProps['whenCreated'];\n    onMarkerAdd?: (marker: MarkerInterface) => MojaveWastelandMarkerProps['onAdd'];\n}\n\nconst MojaveWastelandMap = ({\n    className = '',\n    onMapCreation = undefined,\n    onMarkerAdd = undefined,\n}: MojaveWastelandMapProps): JSX.Element => {\n\n    const isFoundMarkersShown = useAppSelector(selectIsFoundMarkersShown);\n\n    const markers = useAppSelector(selectMarkers);\n\n    const dispatch = useAppDispatch();\n\n    const handleMarkButtonClick = (marker: MarkerInterface): () => void => React.useCallback((): void => {\n        dispatch(toggleMarkerAsFound(marker));\n    }, []);\n\n    return (\n\n        <MapContainer\n            className={classNames([\n                'mojave-wasteland-map',\n                className,\n            ])}\n            maxZoom={4}\n            crs={L.CRS.Simple}\n            bounds={bounds}\n            whenCreated={onMapCreation} // eslint-disable-line react/jsx-handler-names\n        >\n\n            <ImageOverlay\n                url={mojaveWastelandMapImageSrc}\n                bounds={bounds}\n            />\n\n            {markers && markers.map((marker) => {\n\n                // Must move these before the null returns to avoid difference in hooks calls.\n                const onAdd = onMarkerAdd ? onMarkerAdd(marker) : undefined;\n                const onMarkButtonClick = handleMarkButtonClick(marker);\n\n                if (!marker.lat || !marker.lng) {\n                    return null;\n                }\n\n                // Don't render found items.\n                if (!isFoundMarkersShown && marker.isFound) {\n                    return null;\n                }\n\n                if (marker.isHidden) {\n                    return null;\n                }\n\n                return (\n\n                    <MojaveWastelandMarker\n                        key={marker.id}\n                        lat={marker.lat}\n                        lng={marker.lng}\n                        isFound={marker.isFound}\n                        url={marker.url}\n                        title={marker.title}\n                        desc={marker.desc}\n                        imgSrc={marker.imgSrc}\n                        onMarkButtonClick={onMarkButtonClick}\n                        type={marker.type}\n                        subType={marker.subType}\n                        onAdd={onAdd}\n                    />\n\n                );\n\n            })}\n\n        </MapContainer>\n\n    );\n\n};\n\nexport default MojaveWastelandMap;\n","export default __webpack_public_path__ + \"static/media/fallout-nv-logo.35f1fe39.png\";","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MarkerListItem.scss';\nimport {\n    Button,\n    Checkbox,\n    Tooltip,\n} from '@chakra-ui/react';\n\nexport interface MarkerListItemProps {\n    tag?: React.ComponentType | keyof JSX.IntrinsicElements;\n    className?: string;\n    isFound?: boolean;\n    onMarkCheckboxChange?: React.InputHTMLAttributes<Element>['onChange'];\n    onMarkerTitleClick?: React.DOMAttributes<Element>['onClick'];\n    title?: string;\n}\n\nconst MarkerListItem = ({\n    tag = 'li',\n    className = '',\n    isFound = false,\n    onMarkCheckboxChange = undefined,\n    onMarkerTitleClick = undefined,\n    title = '',\n}: MarkerListItemProps = {}): JSX.Element => {\n\n    const Tag = tag;\n\n    return (\n\n        <Tag\n            className={classNames([\n                'marker-list-item',\n                className,\n            ])}\n        >\n\n            <Checkbox\n                className={classNames('marker-list-item__found-checkbox')}\n                isChecked={isFound}\n                onChange={onMarkCheckboxChange}\n                colorScheme=\"blue\"\n                size=\"lg\"\n            />\n\n            <Tooltip\n                label=\"Jump to Marker\"\n                placement=\"top\"\n                hasArrow={true}\n                openDelay={500}\n            >\n\n                <Button\n                    onClick={onMarkerTitleClick}\n                    size=\"md\"\n                    variant=\"link\"\n                    colorScheme=\"blue\"\n                    fontWeight=\"normal\"\n                    wordBreak=\"break-all\"\n                    whiteSpace=\"unset\"\n                    textAlign=\"left\"\n                >\n\n                    {title}\n\n                </Button>\n\n            </Tooltip>\n\n        </Tag>\n\n    );\n\n};\n\nexport default React.memo(MarkerListItem);\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './MarkerTypePanel.scss';\nimport {\n    typesThatHaveSubTypes,\n    typeLabelMap,\n    typeColorMap,\n    subTypeSkillBookLabelMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n    MarkerType,\n    MarkerSubtype,\n} from 'types';\nimport MarkerListItem from 'Components/MarkerListItem/MarkerListItem';\nimport type { MarkerListItemProps } from 'Components/MarkerListItem/MarkerListItem';\nimport {\n    Box,\n    Button,\n    List,\n    ListItem,\n    Tooltip,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport interface MarkerTypePanelProps {\n    className?: string;\n    type?: MarkerType;\n    markers: Array<MarkerInterface>;\n    onMarkButtonClick?: (marker: MarkerInterface) => MarkerListItemProps['onMarkCheckboxChange'];\n    onTypeClick?: React.DOMAttributes<Element>['onClick'];\n    onMarkerTitleClick?: (marker: MarkerInterface) => MarkerListItemProps['onMarkerTitleClick'];\n}\n\nconst MarkerTypePanel = ({\n    className = '',\n    type = undefined,\n    markers = [],\n    onMarkButtonClick = undefined,\n    onTypeClick = undefined,\n    onMarkerTitleClick = undefined,\n}: MarkerTypePanelProps): JSX.Element => {\n\n    const hasSubTypes = type ? typesThatHaveSubTypes.includes(type) : false;\n\n    const subTypes: {\n        [index: string]: {\n            id: MarkerSubtype;\n            markers: Array<MarkerInterface>;\n        };\n    } = {};\n\n    if (hasSubTypes) {\n        markers.forEach((marker) => {\n            if (!marker.subType) {\n                return;\n            }\n            const subType = subTypes[marker.subType];\n\n            if (subType) {\n                // Already a object, just add the new marker to markers.\n                subType.markers.push(marker);\n            } else {\n                // Create object for sub type\n                subTypes[marker.subType] = {\n                    id: marker.subType,\n                    markers: [marker],\n                };\n            }\n        });\n    }\n\n    const renderMarkerListItem = (marker: MarkerInterface): JSX.Element => {\n\n        return (\n\n            <MarkerListItem\n                tag={ListItem}\n                key={marker.id}\n                isFound={marker.isFound}\n                onMarkCheckboxChange={onMarkButtonClick ? onMarkButtonClick(marker) : undefined}\n                onMarkerTitleClick={onMarkerTitleClick ? onMarkerTitleClick(marker) : undefined}\n                title={marker.title}\n            />\n\n        );\n\n    };\n\n    return (\n\n        <section\n            className={classNames([\n                'marker-type-panel',\n                className,\n            ])}\n        >\n\n            <header\n                className={classNames('marker-type-panel__header')}\n            >\n\n                <Box\n                    // color will be inherited from FontAwesomeIcon\n                    color={type ? typeColorMap[type] : undefined}\n                    className={classNames([\n                        'marker-type-panel__icon',\n                    ])}\n                >\n\n                    <FontAwesomeIcon\n                        icon={faMapMarkerAlt}\n                    />\n\n                </Box>\n\n                <Tooltip\n                    label=\"Only show this marker type\"\n                    placement=\"top\"\n                    hasArrow={true}\n                    openDelay={500}\n                >\n\n                    <Button\n                        variant=\"link\"\n                        colorScheme=\"blue\"\n                        className={classNames('marker-type-panel__header-btn')}\n                        onClick={onTypeClick}\n                    >\n\n                        {type ? typeLabelMap[type] : 'Misc'}\n\n                    </Button>\n\n                </Tooltip>\n\n            </header>\n\n            <List\n                className={classNames('marker-type-panel__list')}\n            >\n\n                {(hasSubTypes) ? Object.values(subTypes).map((subType) => {\n\n                    return (\n\n                        <ListItem\n                            className={classNames('marker-type-panel__sub-type-list-item')}\n                            key={subType.id}\n                        >\n\n                            <span\n                                className={classNames('marker-type-panel__sub-type-label')}\n                            >\n\n                                {/* TODO: Handle other sub types */}\n                                {subTypeSkillBookLabelMap[subType.id]}\n\n                            </span>\n\n                            <List>\n\n                                {subType.markers.map((marker) => renderMarkerListItem(marker))}\n\n                            </List>\n\n                        </ListItem>\n\n                    );\n\n                }) : markers.map((marker) => renderMarkerListItem(marker))}\n\n            </List>\n\n        </section>\n\n    );\n\n};\n\nexport default MarkerTypePanel;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './SettingsPanel.scss';\nimport FalloutNVLogoImageSrc from './fallout-nv-logo.png';\nimport MarkerTypePanel from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport type { MarkerTypePanelProps } from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport {\n    typeMap,\n} from 'types';\nimport type {\n    MarkerInterface,\n    MarkerType,\n} from 'types';\nimport {\n    Button,\n    Checkbox,\n    Stack,\n    Tooltip,\n    Box,\n    Image,\n    Heading,\n    Link,\n} from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\nimport {\n    selectIsFoundMarkersShown,\n    selectSkillBookMarkers,\n    selectSnowGlobeMarkers,\n    toggleShowFoundMarkers,\n    filterMarkerType,\n    showAllMarkers,\n    toggleMarkerAsFound,\n} from 'Slices/appSlice';\nimport {\n    useAppDispatch,\n    useAppSelector,\n} from 'hooks';\n\nexport interface SettingsPanelProps {\n    className?: string;\n    appVersion?: string;\n    onMarkerTitleClick?: MarkerTypePanelProps['onMarkerTitleClick'];\n    onShowAllClick?: React.DOMAttributes<Element>['onClick'];\n    onTypeClick?: (type: MarkerType) => void;\n    isLargeScreen?: boolean;\n}\n\nconst SettingsPanel = ({\n    className = '',\n    appVersion = '',\n    onMarkerTitleClick = undefined,\n    onShowAllClick = undefined,\n    onTypeClick = undefined,\n    isLargeScreen = true,\n    // ...props\n}: SettingsPanelProps): JSX.Element => {\n\n    const isFoundMarkersShown = useAppSelector(selectIsFoundMarkersShown);\n\n    const skillBookMarkers = useAppSelector(selectSkillBookMarkers);\n    const snowGlobeMarkers = useAppSelector(selectSnowGlobeMarkers);\n\n    const dispatch = useAppDispatch();\n\n    const handleShowAllClick = (event: React.MouseEvent): void => {\n        dispatch(showAllMarkers());\n        if (onShowAllClick) {\n            onShowAllClick(event);\n        }\n    };\n\n    const handleClickShowFoundMarkers = (): void => {\n        dispatch(toggleShowFoundMarkers());\n    };\n\n    const handleTypeClick = (type: MarkerType) => (): void => {\n        dispatch(filterMarkerType(type));\n        if (onTypeClick) {\n            onTypeClick(type);\n        }\n    };\n\n    const handleMarkButtonClick = (marker: MarkerInterface): () => void => React.useCallback((): void => {\n        dispatch(toggleMarkerAsFound(marker));\n    }, []);\n\n    return (\n\n        <Box\n            as=\"section\"\n            className={classNames([\n                'settings-panel',\n                className,\n            ])}\n        >\n\n            <header\n                className={classNames('settings-panel__header')}\n            >\n\n                <figure\n                    className={classNames('settings-panel__logo')}\n                >\n\n                    <Image\n                        src={FalloutNVLogoImageSrc}\n                        alt=\"Fallout: New Vegas Logo\"\n                    />\n\n                </figure>\n\n                <Heading\n                    marginY=\"4\"\n                >\n                    Interactive Map\n                </Heading>\n\n                <Stack\n                    direction={isLargeScreen ? 'row' : 'column'}\n                    align=\"center\"\n                    justify=\"center\"\n                    spacing=\"4\"\n                >\n\n                    <Tooltip\n                        label=\"Show all marker types\"\n                        placement=\"top\"\n                        hasArrow={true}\n                    >\n\n                        <Button\n                            onClick={handleShowAllClick}\n                            leftIcon={(\n                                <FontAwesomeIcon\n                                    icon={faEye}\n                                />\n                            )}\n                            variant=\"outline\"\n                        >\n                            Show All Types\n                        </Button>\n\n                    </Tooltip>\n\n                    <Checkbox\n                        isChecked={isFoundMarkersShown}\n                        onChange={handleClickShowFoundMarkers}\n                        size=\"lg\"\n                    >\n\n                        <Tooltip\n                            label=\"If checked, markers 'marked as found' will still appear on the map.\"\n                            placement=\"top\"\n                            hasArrow={true}\n                        >\n\n                            Show Found Markers\n\n                        </Tooltip>\n\n                    </Checkbox>\n\n                </Stack>\n\n            </header>\n\n            <div\n                className={classNames('settings-panel__content')}\n            >\n\n                {/* TODO: iterate over typeMap values*/}\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SkillBook}\n                    markers={skillBookMarkers}\n                    onMarkButtonClick={handleMarkButtonClick}\n                    onTypeClick={handleTypeClick(typeMap.SkillBook)}\n                    onMarkerTitleClick={onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SnowGlobe}\n                    markers={snowGlobeMarkers}\n                    onMarkButtonClick={handleMarkButtonClick}\n                    onTypeClick={handleTypeClick(typeMap.SnowGlobe)}\n                    onMarkerTitleClick={onMarkerTitleClick}\n                />\n\n            </div>\n\n            <footer\n                className={classNames('settings-panel__footer')}\n            >\n\n                Created By\n\n                {' '}\n\n                <Link\n                    href=\"https://github.com/srt4rulez\"\n                    isExternal={true}\n                    color=\"blue.500\"\n                >\n                    srt4rulez\n                </Link>\n\n                {' | '}\n\n                v{appVersion}\n\n                {' | '}\n\n                <Link\n                    href=\"https://github.com/srt4rulez/fallout-new-vegas-interactive-map\"\n                    isExternal={true}\n                    color=\"blue.500\"\n                >\n                    View on Github\n                </Link>\n\n            </footer>\n\n        </Box>\n\n    );\n\n};\n\nexport default SettingsPanel;\n","import * as React from 'react';\nimport './App.scss';\nimport MojaveWastelandMap from 'Components/MojaveWastelandMap/MojaveWastelandMap';\nimport SettingsPanel from 'Components/SettingsPanel/SettingsPanel';\nimport packageJson from './../../../package.json';\nimport type {\n    MarkerInterface,\n    MarkerType,\n} from 'types';\nimport type * as L from 'leaflet';\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    Button,\n    useToast,\n} from '@chakra-ui/react';\nimport {\n    useMedia,\n    useEffectOnce,\n} from 'react-use';\n\nconst App = (): JSX.Element => {\n\n    const [isSettingsDrawerOpen, setIsSettingsDrawerOpen] = React.useState(false);\n\n    const markersRef = React.useRef<{\n        [index: string]: L.Marker;\n    }>({});\n\n    const isLargeScreen = useMedia('(min-width: 1024px)');\n\n    const toast = useToast();\n\n    useEffectOnce(() => {\n        // If the user had the old local storage method, show them a notif about it being migrated.\n        if (window.localStorage.getItem('hasMigratedOldData')) {\n            // We're assuming the migration was successful.\n            toast({\n                title: 'Data Migration Complete',\n                description: 'We detected your saved data from v1 and migrated to v2! 🥳',\n                status: 'success',\n                isClosable: true,\n                duration: null,\n            });\n\n            window.localStorage.removeItem('hasMigratedOldData');\n        }\n    });\n\n    const handleTypeClick = (type: MarkerType): void => { // eslint-disable-line @typescript-eslint/no-unused-vars\n\n        handleSettingsDrawerClose();\n\n    };\n\n    const handleShowAllClick = (): void => {\n\n        handleSettingsDrawerClose();\n\n    };\n\n    const handleMapCreation = (map: L.Map): void => {\n\n        map.on('click', (event: L.LeafletMouseEvent) => {\n            // Allow figuring out what lat + lng we are clicking.\n            if ((window as any).debug === true) { // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n                console.log(event.latlng);\n            }\n        });\n\n    };\n\n    const handleMarkerTitleClick = (markerData: MarkerInterface = {}): () => void => React.useCallback((): void => {\n\n        const marker = markerData.id && markersRef.current[markerData.id] || null;\n\n        if (marker && markerData.lat && markerData.lng) {\n            // Open the popup of the marker.\n            marker.openPopup([markerData.lat, markerData.lng]);\n        }\n\n        handleSettingsDrawerClose();\n\n    }, []);\n\n    /**\n     * When a marker is added to the map, add it to our markers property for use\n     * with handleMarkerTitleClick.\n     */\n    const handleMarkerAdd = (marker: MarkerInterface): (event: L.LeafletEvent) => void => React.useCallback((event: L.LeafletEvent): void => {\n\n        const leafLetMarker = event.target as L.Marker;\n\n        if (marker && marker.id) {\n            markersRef.current[marker.id] = leafLetMarker;\n        }\n\n    }, []);\n\n    const handleOpenSettingsClick = (): void => {\n\n        setIsSettingsDrawerOpen(true);\n\n    };\n\n    const handleSettingsDrawerClose = (): void => {\n\n        setIsSettingsDrawerOpen(false);\n\n    };\n\n    const AppSettingsPanel = (): JSX.Element => { // eslint-disable-line react/no-multi-comp\n\n        return (\n            <SettingsPanel\n                appVersion={packageJson.version}\n                className=\"app__settings-panel\"\n                onTypeClick={handleTypeClick}\n                onShowAllClick={handleShowAllClick}\n                onMarkerTitleClick={handleMarkerTitleClick}\n                isLargeScreen={isLargeScreen}\n            />\n        );\n\n    };\n\n    return (\n\n        <div\n            className=\"app\"\n        >\n\n            {isLargeScreen ? (\n\n                <AppSettingsPanel />\n\n            ) : (\n\n                <div\n                    className=\"app__small-screen-settings-button-container\"\n                >\n\n                    <Button\n                        className=\"app__small-screen-settings-button\"\n                        onClick={handleOpenSettingsClick}\n                        colorScheme=\"teal\"\n                    >\n                        Open Settings\n                    </Button>\n\n                </div>\n\n            )}\n\n            {/* Drawer for small screens */}\n            <Drawer\n                isOpen={isSettingsDrawerOpen}\n                placement=\"bottom\"\n                onClose={handleSettingsDrawerClose}\n                size=\"full\"\n            >\n\n                <DrawerOverlay />\n\n                <DrawerContent>\n\n                    <DrawerCloseButton\n                        zIndex=\"1\"\n                    />\n\n                    <DrawerBody\n                        paddingX=\"2\"\n                    >\n\n                        <AppSettingsPanel />\n\n                    </DrawerBody>\n\n                </DrawerContent>\n\n            </Drawer>\n\n            <MojaveWastelandMap\n                className=\"app__mojave-wasteland-map\"\n                onMapCreation={handleMapCreation}\n                onMarkerAdd={handleMarkerAdd}\n            />\n\n        </div>\n\n    );\n\n};\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst theme = extendTheme({\n    fonts: {\n        heading: 'Roboto',\n        body: 'Roboto',\n    },\n});\n\nexport default theme;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    createTransform,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport appReducer from './Slices/appSlice';\nimport type { MarkerInterface } from './types';\nimport markersFromJson from 'Data/markers.json';\n\nconst markers = (markersFromJson as Array<MarkerInterface>);\n\nconst appTransformer = createTransform(\n    // transform state on its way to being serialized and persisted. (eg pushed into local storage)\n    (inboundState: {\n        markers: Array<MarkerInterface>;\n    }) => {\n        const newMarkers = inboundState.markers.map((marker) => {\n            // Only store ID and isFound. We don't want to save lat/lng or anything else that\n            // may change in the future.\n            return {\n                id: marker.id,\n                isFound: ('isFound' in marker) ? marker.isFound : false,\n            };\n        });\n\n        return {\n            ...inboundState,\n            markers: newMarkers,\n        };\n    },\n    // transform state being rehydrated (eg pulled from local storage)\n    (outboundState) => {\n        // Local storage markers from v2. We only saved id and isFound fields.\n        const v2Markers = outboundState.markers;\n\n        const newMarkers = markers.map((marker) => {\n            let isFound = false;\n\n            const v2MarkerIndex = v2Markers.findIndex((v2Marker) => v2Marker.id === marker.id);\n\n            if (v2MarkerIndex !== -1 && ('isFound' in v2Markers[v2MarkerIndex])) {\n                isFound = Boolean(v2Markers[v2MarkerIndex].isFound);\n            }\n\n            return {\n                ...marker,\n                isFound: isFound,\n            };\n        });\n\n        return {\n            ...outboundState,\n            markers: newMarkers,\n        };\n    },\n    {\n        whitelist: [\n            'app'\n        ],\n    }\n);\n\nconst persistConfig = {\n    key: 'root',\n    version: 2,\n    storage: storage,\n    transforms: [\n        appTransformer,\n    ],\n};\n\nconst persistedReducer = persistReducer(persistConfig, combineReducers({\n    app: appReducer,\n}));\n\nlet isFoundMarkersShown = false;\n\n// Check if the user is using v1 with the previous local storage method.\n\nif (window.localStorage.getItem('isFoundMarkersShown')) {\n    isFoundMarkersShown = Boolean(window.localStorage.getItem('isFoundMarkersShown'));\n\n    // Set the old data as v1_isFoundMarkersShown in case we need it again.\n    window.localStorage.setItem('v1_isFoundMarkersShown', window.localStorage.getItem('isFoundMarkersShown') || '');\n\n    // Now that we migrated it, remove it so this code doesn't run again.\n    window.localStorage.removeItem('isFoundMarkersShown');\n\n    // Set a flag to let our react component know we migrated.\n    window.localStorage.setItem('hasMigratedOldData', '1');\n}\n\nif (window.localStorage.getItem('markers')) {\n    const oldMarkersAsString = window.localStorage.getItem('markers');\n    const oldMarkers = (oldMarkersAsString ? (JSON.parse(oldMarkersAsString) as Array<MarkerInterface>) : []);\n\n    oldMarkers.forEach((oldMarker: MarkerInterface) => {\n        const newMarkerIndex = markers.findIndex((marker) => marker.id === oldMarker.id);\n\n        if (newMarkerIndex !== -1) {\n            markers[newMarkerIndex] = {\n                ...markers[newMarkerIndex],\n                isFound: oldMarker.isFound,\n            };\n        }\n    });\n\n    // Set the old data as v1_markers in case we need it again.\n    window.localStorage.setItem('v1_markers', window.localStorage.getItem('markers') || '');\n\n    // Now that we migrated it, remove it so this code doesn't run again.\n    window.localStorage.removeItem('markers');\n\n    // Set a flag to let our react component know we migrated.\n    window.localStorage.setItem('hasMigratedOldData', '1');\n}\n\nconst store = configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => {\n        return getDefaultMiddleware({\n            serializableCheck: { // https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        });\n    },\n    preloadedState: { // initial state of store.\n        app: {\n            markers: markers,\n            isFoundMarkersShown: isFoundMarkersShown,\n        },\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n\nexport const persistor = persistStore(store);\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet-defaulticon-compatibility';\nimport './index.scss';\nimport App from 'Components/App/App';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport '@fontsource/roboto';\nimport '@fontsource/roboto/700.css';\nimport { Provider } from 'react-redux';\nimport store, { persistor } from './store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider\n            store={store}\n        >\n            <PersistGate\n                persistor={persistor}\n            >\n                <ChakraProvider\n                    theme={theme}\n                >\n                    <App />\n                </ChakraProvider>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}