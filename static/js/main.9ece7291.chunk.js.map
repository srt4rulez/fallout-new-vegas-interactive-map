{"version":3,"sources":["Components/MojaveWastelandMap/mojave-wasteland-map.jpg","Data/marker-types.js","Components/MojaveWastelandMarker/MojaveWastelandMarker.js","Components/MojaveWastelandMap/MojaveWastelandMap.js","Components/SettingsPanel/fallout-nv-logo.png","Components/MarkerListItem/MarkerListItem.js","Components/MarkerTypePanel/MarkerTypePanel.js","Components/SettingsPanel/SettingsPanel.js","Components/App/App.js","index.js"],"names":["typeMap","typeLabelMap","typeColorMap","subTypeSkillBookSubMap","subTypeSkillBookLabelMap","MojaveWastelandMarker","props","icon","L","className","html","type","iconSize","iconAnchor","iconSizeX","popupAnchor","Marker","classNames","position","lat","lng","opacity","isFound","eventHandlers","add","onAdd","Popup","maxWidth","href","url","rel","target","subType","title","desc","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","imgSrc","src","alt","onChange","onMarkButtonClick","checked","defaultProps","event","markers","isFoundMarkersShown","onMapCreation","onMarkerAdd","mapOptions","maxZoom","crs","Simple","bounds","MojaveWastelandMap","MapContainer","whenCreated","ImageOverlay","mojaveWastelandMapImageSrc","map","marker","isHidden","sub_type","id","MarkerListItem","Tag","tag","onMarkCheckboxChange","onClick","onMarkerTitleClick","typesThatHaveSubTypes","MarkerTypePanel","hasSubTypes","includes","subTypes","forEach","push","onTypeClick","Object","values","SettingsPanel","skillBookMarkers","filter","snowGlobeMarkers","uniqueWeaponMarkers","FalloutNVLogoImageSrc","onShowAllClick","onClickShowFoundMarkers","appVersion","App","handleMarkButtonClick","setState","prevState","index","findIndex","item","oldMarker","newMarkers","newMarker","updateLocalStorageMarker","localStorageMarkersJson","window","localStorage","getItem","localStorageMarkers","JSON","parse","setItem","stringify","handleShowFoundMarkersClick","newState","handleTypeClick","handleShowAllClick","handleMapCreation","on","debug","console","log","latlng","handleMarkerTitleClick","markerData","openPopup","handleMarkerAdd","markerLatLng","getLatLng","state","find","localStorageMarker","localStorageIsFoundMarkersShown","this","version","Component","packageJson","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ece7291.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mojave-wasteland-map.a46f7234.jpg\";","const typeMap = {\n    SnowGlobe:    'snow_globe',\n    SkillBook:    'skill_book',\n    UniqueWeapon: 'unique_weapon',\n};\n\nconst typeLabelMap = {\n    [typeMap.SnowGlobe]:    'Snow Globe',\n    [typeMap.SkillBook]:    'Skill Book',\n    [typeMap.UniqueWeapon]: 'Unique Weapon',\n};\n\n// Bulma CSS colors.\nconst typeColorMap = {\n    [typeMap.SnowGlobe]:    'link',\n    [typeMap.SkillBook]:    'warning',\n    [typeMap.UniqueWeapon]: 'primary',\n};\n\nconst subTypeSkillBookSubMap = {\n    ChineseArmySpecialOpsTrainingManual: 'casotm',\n    WastelandSurvivalGuide: 'wsg',\n    BigBookOfScience: 'bbos',\n    DCJournalOfInternalMedicine: 'dcjoim',\n};\n\nconst subTypeSkillBookLabelMap = {\n    [subTypeSkillBookSubMap.ChineseArmySpecialOpsTrainingManual]: 'Chinese Army: Special Ops Training Manual',\n    [subTypeSkillBookSubMap.WastelandSurvivalGuide]: 'Wasteland Survival Guide',\n    [subTypeSkillBookSubMap.BigBookOfScience]: 'Big Book of Science',\n    [subTypeSkillBookSubMap.DCJournalOfInternalMedicine]: 'D.C. Journal of Internal Medicine',\n};\n\nexport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    subTypeSkillBookSubMap,\n    subTypeSkillBookLabelMap,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MojaveWastelandMarker.scss';\nimport {\n    Marker,\n    Popup,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport DOMPurify from 'dompurify';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    subTypeSkillBookLabelMap,\n} from 'Data/marker-types';\n\nconst propTypes = {\n    className: PropTypes.string,\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n    isFound: PropTypes.bool,\n    url: PropTypes.string,\n    title: PropTypes.string,\n    desc: PropTypes.string,\n    imgSrc: PropTypes.string,\n    onMarkButtonClick: PropTypes.func,\n    type: PropTypes.oneOf(Object.values(typeMap)),\n    subType: PropTypes.string,\n    onAdd: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    isFound: false,\n    url: '',\n    title: '',\n    desc: '',\n    imgSrc: '',\n    onMarkButtonClick: (event) => {},\n    type: '',\n    subType: '',\n    onAdd: () => {},\n};\n\nconst MojaveWastelandMarker = (props) => {\n\n    const iconSizeX = 25.5;\n    const iconSizeY = 34; // update this value first, then check width for setting X.\n\n    const icon = L.divIcon({\n        className: 'mojave-wasteland-marker__icon-wrapper',\n        html: `\n            <i\n                class=\"mojave-wasteland-marker__icon fas fa-map-marker-alt has-text-${typeColorMap[props.type]}\"\n                style=\"font-size: ${iconSizeY}px;\"\n            />\n        `,\n        iconSize: [\n            iconSizeX,\n            iconSizeY,\n        ],\n        iconAnchor: [\n            (iconSizeX / 2), // assuming the \"pin\" of the icon is in the middle of the icon.\n            iconSizeY,\n        ],\n        popupAnchor: [\n            0,\n            (-(iconSizeY) - 3), // 3 = spacing between icon and popup arrow.\n        ],\n    });\n\n    return (\n\n        <Marker\n            className={classNames([\n                'mojave-wasteland-marker',\n                props.className,\n            ])}\n            position={[props.lat, props.lng]}\n            opacity={props.isFound ? 0.5 : 1}\n            icon={icon}\n            eventHandlers={{\n                add: props.onAdd,\n            }}\n        >\n\n            <Popup\n                maxWidth={350}\n            >\n\n                <h2\n                    className=\"title is-4\"\n                >\n\n                    <a\n                        href={props.url}\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                    >\n\n                        {props.type === typeMap.SkillBook && subTypeSkillBookLabelMap[props.subType] && `${subTypeSkillBookLabelMap[props.subType]} - `}\n\n                        {props.title}\n\n                    </a>\n\n                </h2>\n\n                {typeLabelMap[props.type] && (\n\n                    <div\n                        className=\"tags has-addons is-justify-content-center\"\n                    >\n\n                        <span\n                            className=\"tag is-dark mb-0\"\n                        >\n                            type\n                        </span>\n\n                        <span\n                            className={classNames([\n                                'tag',\n                                'mb-0',\n                                'is-lowercase',\n                                `is-${typeColorMap[props.type]}`,\n                            ])}\n                        >\n                            {typeLabelMap[props.type]}\n                        </span>\n\n                    </div>\n\n                )}\n\n                {props.desc && (\n\n                    <p\n                        className={classNames('mojave-wasteland-marker__desc', 'content')}\n                        dangerouslySetInnerHTML={{\n                            __html: DOMPurify.sanitize(props.desc),\n                        }}\n                    />\n\n                )}\n\n                {props.imgSrc && (\n\n                    <figure\n                        className=\"image block\"\n                    >\n\n                        <img\n                            src={props.imgSrc}\n                            alt={props.title}\n                        />\n\n                    </figure>\n\n                )}\n\n                <label\n                    className=\"checkbox button is-fullwidth\"\n                >\n\n                    <input\n                        className=\"mr-1\"\n                        onChange={props.onMarkButtonClick}\n                        type=\"checkbox\"\n                        checked={props.isFound}\n                    />\n\n                    Mark As Found\n\n                </label>\n\n            </Popup>\n\n        </Marker>\n\n    );\n\n};\n\nMojaveWastelandMarker.propTypes = propTypes;\nMojaveWastelandMarker.defaultProps = defaultProps;\n\nexport default MojaveWastelandMarker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MojaveWastelandMap.scss';\nimport {\n    MapContainer,\n    ImageOverlay,\n} from 'react-leaflet';\nimport * as L from 'leaflet';\nimport mojaveWastelandMapImageSrc from './mojave-wasteland-map.jpg';\nimport MojaveWastelandMarker from 'Components/MojaveWastelandMarker/MojaveWastelandMarker';\n\nconst propTypes = {\n    className: PropTypes.string,\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    isFoundMarkersShown: PropTypes.bool,\n    onMapCreation: PropTypes.func,\n    onMarkerAdd: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    markers: [],\n    onMarkButtonClick: (marker = {}) => (event) => {},\n    isFoundMarkersShown: true,\n    onMapCreation: () => {},\n    onMarkerAdd: () => {},\n};\n\n/**\n * @type {Object}\n *\n * @see https://react-leaflet.js.org/docs/api-map#mapcontainer\n *\n * These props are immutable.\n */\nconst mapOptions = {\n    maxZoom: 4,\n    crs: L.CRS.Simple,\n    bounds: [\n        [0, 0],\n        [1024, 1024], // for now, this is just the size of the map image.\n    ],\n};\n\nconst MojaveWastelandMap = (props) => {\n\n    return (\n\n        <MapContainer\n            className={classNames([\n                'mojave-wasteland-map',\n                props.className,\n            ])}\n            {...mapOptions}\n            whenCreated={props.onMapCreation}\n        >\n\n            <ImageOverlay\n                url={mojaveWastelandMapImageSrc}\n                bounds={mapOptions.bounds}\n            />\n\n            {props.markers.map((marker) => {\n\n                if (!marker.lat || !marker.lng) {\n                    return null;\n                }\n\n                // Don't render found items.\n                if (!props.isFoundMarkersShown && marker.isFound) {\n                    return null;\n                }\n\n                if (marker.isHidden) {\n                    return null;\n                }\n\n                return (\n\n                    <MojaveWastelandMarker\n                        key={marker.id}\n                        lat={marker.lat}\n                        lng={marker.lng}\n                        isFound={marker.isFound}\n                        url={marker.url}\n                        title={marker.title}\n                        desc={marker.desc}\n                        imgSrc={marker.imgSrc}\n                        onMarkButtonClick={props.onMarkButtonClick(marker)}\n                        type={marker.type}\n                        subType={marker.sub_type}\n                        onAdd={props.onMarkerAdd}\n                    />\n\n                );\n\n            })}\n\n        </MapContainer>\n\n    );\n\n};\n\nMojaveWastelandMap.propTypes = propTypes;\nMojaveWastelandMap.defaultProps = defaultProps;\n\nexport default MojaveWastelandMap;\n","export default __webpack_public_path__ + \"static/media/fallout-nv-logo.35f1fe39.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MarkerListItem.scss';\n\nconst propTypes = {\n    tag: PropTypes.string,\n    className: PropTypes.string,\n    isFound: PropTypes.bool,\n    onMarkCheckboxChange: PropTypes.func,\n    onMarkerTitleClick: PropTypes.func,\n    title: PropTypes.string,\n};\n\nconst defaultProps = {\n    tag: 'li',\n    className: '',\n    isFound: false,\n    onMarkCheckboxChange: (event) => {},\n    onMarkerTitleClick: (event) => {},\n    title: '',\n};\n\nconst MarkerListItem = (props) => {\n\n    const Tag = props.tag;\n\n    return (\n\n        <Tag\n            className={classNames([\n                'marker-list-item',\n                props.className,\n            ])}\n        >\n\n            <input\n                className={classNames('marker-list-item__found-checkbox')}\n                type=\"checkbox\"\n                checked={props.isFound}\n                onChange={props.onMarkCheckboxChange}\n                title=\"Mark As Found\"\n            />\n\n            <button\n                className={classNames('marker-list-item__button')}\n                onClick={props.onMarkerTitleClick}\n            >\n\n                {props.title}\n\n            </button>\n\n        </Tag>\n\n    );\n\n};\n\nMarkerListItem.propTypes = propTypes;\nMarkerListItem.defaultProps = defaultProps;\n\nexport default MarkerListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './MarkerTypePanel.scss';\nimport {\n    typeMap,\n    typeLabelMap,\n    typeColorMap,\n    subTypeSkillBookLabelMap,\n} from 'Data/marker-types';\nimport MarkerListItem from 'Components/MarkerListItem/MarkerListItem';\n\nconst propTypes = {\n    className: PropTypes.string,\n    type: PropTypes.oneOf(Object.values(typeMap)),\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    onTypeClick: PropTypes.func,\n    onMarkerTitleClick: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    type: '',\n    markers: [],\n    onMarkButtonClick: (marker = {}) => (event) => {},\n    onTypeClick: (event) => {},\n    onMarkerTitleClick: (marker = {}) => (event) => {},\n};\n\nconst typesThatHaveSubTypes = [\n    typeMap.SkillBook,\n];\n\nconst MarkerTypePanel = (props) => {\n\n    const markers = props.markers;\n\n    const hasSubTypes = typesThatHaveSubTypes.includes(props.type);\n\n    const subTypes = {};\n\n    if (hasSubTypes) {\n        markers.forEach((marker) => {\n            if (subTypes[marker.sub_type]) {\n                // Already a object, just add the new marker to markers.\n                subTypes[marker.sub_type].markers.push(marker);\n            } else {\n                // Create object for sub type\n                subTypes[marker.sub_type] = {\n                    id: marker.sub_type,\n                    markers: [marker],\n                };\n            }\n        });\n    }\n\n    return (\n\n        <section\n            className={classNames([\n                'marker-type-panel',\n                props.className,\n            ])}\n        >\n\n            <header\n                className={classNames('marker-type-panel__header')}\n            >\n\n                <i\n                    className={classNames([\n                        'marker-type-panel__icon',\n                        'fas',\n                        'fa-map-marker-alt',\n                        `has-text-${typeColorMap[props.type]}`,\n                    ])}\n                />\n\n                <button\n                    type=\"button\"\n                    className={classNames('marker-type-panel__header-btn')}\n                    title=\"Only show this marker type\"\n                    onClick={props.onTypeClick}\n                >\n\n                    {typeLabelMap[props.type] || 'Misc'}\n\n                </button>\n\n            </header>\n\n            <ul\n                className={classNames('marker-type-panel__list')}\n            >\n\n                {(hasSubTypes) ? Object.values(subTypes).map((subType) => {\n\n                    return (\n\n                        <li\n                            className={classNames('marker-type-panel__sub-type-list-item')}\n                            key={subType.id}\n                        >\n\n                            <span\n                                className={classNames('marker-type-panel__sub-type-label')}\n                            >\n\n                                {subTypeSkillBookLabelMap[subType.id]}\n\n                            </span>\n\n                            <ul>\n\n                                {subType.markers.map((marker) => {\n\n                                    return (\n\n                                        <MarkerListItem\n                                            tag=\"li\"\n                                            key={marker.id}\n                                            isFound={marker.isFound}\n                                            onMarkCheckboxChange={props.onMarkButtonClick(marker)}\n                                            onMarkerTitleClick={props.onMarkerTitleClick(marker)}\n                                            title={marker.title}\n                                        />\n\n                                    );\n\n                                })}\n\n                            </ul>\n\n                        </li>\n\n                    );\n\n                }) : props.markers.map((marker) => {\n\n                    return (\n\n                        <MarkerListItem\n                            tag=\"li\"\n                            key={marker.id}\n                            isFound={marker.isFound}\n                            onMarkCheckboxChange={props.onMarkButtonClick(marker)}\n                            onMarkerTitleClick={props.onMarkerTitleClick(marker)}\n                            title={marker.title}\n                        />\n\n                    );\n\n                })}\n\n            </ul>\n\n        </section>\n\n    );\n\n};\n\nMarkerTypePanel.propTypes = propTypes;\nMarkerTypePanel.defaultProps = defaultProps;\n\nexport default MarkerTypePanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './SettingsPanel.scss';\nimport FalloutNVLogoImageSrc from './fallout-nv-logo.png';\nimport MarkerTypePanel from 'Components/MarkerTypePanel/MarkerTypePanel';\nimport { typeMap } from 'Data/marker-types';\n\nconst propTypes = {\n    className: PropTypes.string,\n    markers: PropTypes.array,\n    onMarkButtonClick: PropTypes.func,\n    isFoundMarkersShown: PropTypes.bool,\n    onClickShowFoundMarkers: PropTypes.func,\n    appVersion: PropTypes.string,\n    onMarkerTitleClick: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: '',\n    markers: [],\n    onMarkButtonClick: () => {},\n    isFoundMarkersShown: true,\n    onClickShowFoundMarkers: () => {},\n    appVersion: '',\n    onMarkerTitleClick: () => {},\n};\n\nconst SettingsPanel = (props) => {\n\n    const skillBookMarkers = props.markers.filter((marker) => marker.type === typeMap.SkillBook);\n    const snowGlobeMarkers = props.markers.filter((marker) => marker.type === typeMap.SnowGlobe);\n    const uniqueWeaponMarkers = props.markers.filter((marker) => marker.type === typeMap.UniqueWeapon);\n\n    return (\n\n        <section\n            className={classNames([\n                'settings-panel',\n                'box',\n                props.className,\n            ])}\n        >\n\n            <header\n                className={classNames('settings-panel__header')}\n            >\n\n                <figure\n                    className={classNames('settings-panel__logo', 'image')}\n                >\n\n                    <img\n                        src={FalloutNVLogoImageSrc}\n                        alt=\"Fallout: New Vegas Logo\"\n                    />\n\n                </figure>\n\n                <h2\n                    className=\"title is-2\"\n                >\n                    Interactive Map\n                </h2>\n\n                <div\n                    className=\"buttons is-centered\"\n                >\n\n                    <button\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={props.onShowAllClick}\n                        title=\"Show all marker types\"\n                    >\n\n                        <span\n                            className=\"icon\"\n                        >\n\n                            <i\n                                className=\"far fa-eye\"\n                            />\n\n                        </span>\n\n                        <span>Show All Types</span>\n\n                    </button>\n\n                    <label\n                        className=\"settings-panel__show-found-markers-btn checkbox button\"\n                        title=\"If checked, markers 'marked as found' will still appear on the map.\"\n                    >\n\n                        <input\n                            className=\"mr-1\"\n                            type=\"checkbox\"\n                            checked={props.isFoundMarkersShown}\n                            onChange={props.onClickShowFoundMarkers}\n                        />\n\n                        {' '}\n\n                        Show Found Markers\n\n                    </label>\n\n                </div>\n\n            </header>\n\n            <div\n                className={classNames('settings-panel__content')}\n            >\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SkillBook}\n                    markers={skillBookMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.SkillBook)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.SnowGlobe}\n                    markers={snowGlobeMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.SnowGlobe)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n                <MarkerTypePanel\n                    className=\"settings-panel__marker-type-panel\"\n                    type={typeMap.UniqueWeapon}\n                    markers={uniqueWeaponMarkers}\n                    onMarkButtonClick={props.onMarkButtonClick}\n                    onTypeClick={props.onTypeClick(typeMap.UniqueWeapon)}\n                    onMarkerTitleClick={props.onMarkerTitleClick}\n                />\n\n            </div>\n\n            <footer\n                className={classNames('settings-panel__footer')}\n            >\n\n                Created By\n\n                {' '}\n\n                <a\n                    href=\"https://github.com/srt4rulez\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                >\n                    srt4rulez\n                </a>\n\n                {' | '}\n\n                v{props.appVersion}\n\n                {' | '}\n\n                <a\n                    href=\"https://github.com/srt4rulez/fallout-new-vegas-interactive-map\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                >\n                    View on Github\n                </a>\n\n            </footer>\n\n        </section>\n\n    );\n\n};\n\nSettingsPanel.propTypes = propTypes;\nSettingsPanel.defaultProps = defaultProps;\n\nexport default SettingsPanel;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport MojaveWastelandMap from 'Components/MojaveWastelandMap/MojaveWastelandMap';\nimport markers from 'Data/markers.json';\nimport SettingsPanel from 'Components/SettingsPanel/SettingsPanel';\nimport packageJson from './../../../package.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        // Only used with L.Map API.\n        this.markers = {};\n    }\n\n    static version = packageJson.version;\n\n    componentDidMount() {\n        const localStorageMarkersJson= window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = JSON.parse(localStorageMarkersJson);\n\n        const newMarkers = markers.map((marker) => {\n            const localStorageMarker = localStorageMarkers.find((item) => item.id === marker.id);\n\n            const newMarker = {\n                ...marker\n            };\n\n            if (localStorageMarker) {\n                newMarker.isFound = localStorageMarker.isFound;\n            }\n\n            return newMarker;\n        });\n\n        const localStorageIsFoundMarkersShown = window.localStorage.getItem('isFoundMarkersShown');\n\n        const defaultIsFoundMarkersShown = true;\n\n        const isFoundMarkersShown = localStorageIsFoundMarkersShown === null ? defaultIsFoundMarkersShown : localStorageIsFoundMarkersShown === '1';\n\n        this.setState({\n            markers: newMarkers,\n            isFoundMarkersShown: isFoundMarkersShown,\n        });\n    }\n\n    handleMarkButtonClick = (marker = {}) => (event) => {\n\n        this.setState((prevState) => {\n            const index = prevState.markers.findIndex((item) => item.id === marker.id);\n\n            if (index === -1) {\n                return {};\n            }\n\n            const oldMarker = prevState.markers[index] || {};\n\n            const newMarkers = [...prevState.markers];\n\n            const newMarker = {\n                ...oldMarker,\n                isFound: !oldMarker.isFound,\n            };\n\n            this.updateLocalStorageMarker(newMarker);\n\n            newMarkers[index] = newMarker;\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * Set the marker in local storage as found or not.\n     *\n     * @param {Object} marker\n     */\n    updateLocalStorageMarker = (marker = {}) => {\n        const localStorageMarkersJson= window.localStorage.getItem('markers') || '[]';\n\n        const localStorageMarkers = [...JSON.parse(localStorageMarkersJson)];\n\n        const index = localStorageMarkers.findIndex((item) => item.id === marker.id);\n\n        if (index === -1) {\n            localStorageMarkers.push({\n                id: marker.id,\n                isFound: marker.isFound,\n            });\n        } else {\n            localStorageMarkers[index] = {\n                ...localStorageMarkers[index],\n                isFound: marker.isFound,\n            };\n        }\n\n        window.localStorage.setItem('markers', JSON.stringify(localStorageMarkers));\n    };\n\n    handleShowFoundMarkersClick = () => {\n\n        this.setState((prevState) => {\n\n            const newState = !prevState.isFoundMarkersShown;\n\n            window.localStorage.setItem('isFoundMarkersShown', newState ? '1' : '0');\n\n            return {\n                isFoundMarkersShown: newState,\n            };\n        });\n\n    };\n\n    /**\n     * Only show the currently clicked marker type.\n     *\n     * @param {String} type\n     */\n    handleTypeClick = (type) => () => {\n\n        this.setState((prevState) => {\n\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: marker.type !== type,\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * Un-hide all marker types.\n     */\n    handleShowAllClick = () => {\n\n        this.setState((prevState) => {\n\n            const newMarkers = [...prevState.markers].map((marker) => {\n                return {\n                    ...marker,\n                    isHidden: false,\n                };\n            });\n\n            return {\n                markers: newMarkers,\n            };\n        });\n\n    };\n\n    /**\n     * @param {L.Map} map\n     */\n    handleMapCreation = (map) => {\n\n        map.on('click', (event) => {\n            // Allow figuring out what lat + lng we are clicking.\n            if (window.debug === true) {\n                console.log(event.latlng);\n            }\n        });\n\n    };\n\n    handleMarkerTitleClick = (markerData = {}) => () => {\n\n        /**\n         * @var {L.Marker|null}\n         */\n        const marker = this.markers[markerData.id] || null;\n\n        if (marker) {\n            // Open the popup of the marker.\n            marker.openPopup([markerData.lat, markerData.lng]);\n        }\n\n    };\n\n    /**\n     * When a marker is added to the map, add it to our markers property for use\n     * with handleMarkerTitleClick.\n     *\n     * @param {Event} event\n     */\n    handleMarkerAdd = (event) => {\n\n        /**\n         * @var {L.Marker}\n         */\n        const marker = event.target;\n\n        const markerLatLng = marker.getLatLng();\n\n        const lat = markerLatLng.lat;\n        const lng = markerLatLng.lng;\n\n        /**\n         * @var {Object}\n         */\n        const markerData = this.state.markers.find((item) => item.lat === lat && item.lng === lng);\n\n        if (markerData) {\n            this.markers[markerData.id] = marker;\n        }\n\n    };\n\n    render() {\n\n        return (\n\n            <div\n                className=\"app\"\n            >\n\n                <SettingsPanel\n                    appVersion={App.version}\n                    className=\"app__settings-panel\"\n                    markers={this.state.markers}\n                    onMarkButtonClick={this.handleMarkButtonClick}\n                    isFoundMarkersShown={this.state.isFoundMarkersShown}\n                    onClickShowFoundMarkers={this.handleShowFoundMarkersClick}\n                    onTypeClick={this.handleTypeClick}\n                    onShowAllClick={this.handleShowAllClick}\n                    onMarkerTitleClick={this.handleMarkerTitleClick}\n                />\n\n                <MojaveWastelandMap\n                    className=\"app__mojave-wasteland-map\"\n                    markers={this.state.markers}\n                    onMarkButtonClick={this.handleMarkButtonClick}\n                    isFoundMarkersShown={this.state.isFoundMarkersShown}\n                    onMapCreation={this.handleMapCreation}\n                    onMarkerAdd={this.handleMarkerAdd}\n                />\n\n            </div>\n\n        );\n\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet-defaulticon-compatibility';\nimport './index.scss';\nimport App from 'Components/App/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}